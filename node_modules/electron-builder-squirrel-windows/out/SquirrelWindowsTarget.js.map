{"version":3,"file":"SquirrelWindowsTarget.js","sourceRoot":"","sources":["../src/SquirrelWindowsTarget.ts"],"names":[],"mappings":"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","sourcesContent":["import { InvalidConfigurationError, log } from \"builder-util\"\nimport { getBinFromGithub } from \"builder-util/out/binDownload\"\nimport { Arch, getArchSuffix, SquirrelWindowsOptions, Target } from \"electron-builder-lib\"\nimport { WinPackager } from \"electron-builder-lib/out/winPackager\"\nimport * as path from \"path\"\nimport sanitizeFileName from \"sanitize-filename\"\nimport { convertVersion, SquirrelBuilder, SquirrelOptions } from \"./squirrelPack\"\n\nexport default class SquirrelWindowsTarget extends Target {\n  //tslint:disable-next-line:no-object-literal-type-assertion\n  readonly options: SquirrelWindowsOptions = {...this.packager.platformSpecificBuildOptions, ...this.packager.config.squirrelWindows} as SquirrelWindowsOptions\n\n  constructor(private readonly packager: WinPackager, readonly outDir: string) {\n    super(\"squirrel\")\n  }\n\n  async build(appOutDir: string, arch: Arch) {\n    const packager = this.packager\n    const version = packager.appInfo.version\n    const sanitizedName = sanitizeFileName(this.appName)\n\n    // tslint:disable-next-line:no-invalid-template-strings\n    const setupFile = packager.expandArtifactNamePattern(this.options, \"exe\", arch, \"${productName} Setup ${version}.${ext}\")\n    const packageFile = `${sanitizedName}-${convertVersion(version)}-full.nupkg`\n\n    const installerOutDir = path.join(this.outDir, `squirrel-windows${getArchSuffix(arch)}`)\n\n    const artifactPath = path.join(installerOutDir, setupFile)\n\n    this.logBuilding(\"Squirrel.Windows\", artifactPath, arch)\n    if (arch === Arch.ia32) {\n      log.warn(\"For windows consider only distributing 64-bit or use nsis target, see https://github.com/electron-userland/electron-builder/issues/359#issuecomment-214851130\")\n    }\n\n    const distOptions = await this.computeEffectiveDistOptions()\n    const squirrelBuilder = new SquirrelBuilder(distOptions as SquirrelOptions, installerOutDir, packager)\n    await squirrelBuilder.buildInstaller({setupFile, packageFile}, appOutDir, this.outDir, arch)\n\n    packager.dispatchArtifactCreated(artifactPath, this, arch, `${sanitizedName}-Setup-${version}${getArchSuffix(arch)}.exe`)\n\n    const packagePrefix = `${this.appName}-${convertVersion(version)}-`\n    packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}full.nupkg`), this, arch)\n    if (distOptions.remoteReleases != null) {\n      packager.dispatchArtifactCreated(path.join(installerOutDir, `${packagePrefix}delta.nupkg`), this, arch)\n    }\n\n    packager.dispatchArtifactCreated(path.join(installerOutDir, \"RELEASES\"), this, arch)\n  }\n\n  private get appName() {\n    return this.options.name || this.packager.appInfo.name\n  }\n\n  async computeEffectiveDistOptions(): Promise<SquirrelOptions> {\n    const packager = this.packager\n    let iconUrl = this.options.iconUrl\n    if (iconUrl == null) {\n      const info = await packager.info.repositoryInfo\n      if (info != null) {\n        iconUrl = `https://github.com/${info.user}/${info.project}/blob/master/${packager.info.relativeBuildResourcesDirname}/icon.ico?raw=true`\n      }\n\n      if (iconUrl == null) {\n        throw new InvalidConfigurationError(\"iconUrl is not specified, please see https://electron.build/configuration/configuration#WinBuildOptions-iconUrl\")\n      }\n    }\n\n    checkConflictingOptions(this.options)\n\n    const appInfo = packager.appInfo\n    const projectUrl = await appInfo.computePackageUrl()\n    const appName = this.appName\n    const options: SquirrelOptions = {\n      name: appName,\n      productName: this.options.name || appInfo.productName,\n      appId: this.options.useAppIdAsId ? appInfo.id : appName,\n      version: appInfo.version,\n      description: appInfo.description,\n      // better to explicitly set to empty string, to avoid any nugget errors\n      authors: appInfo.companyName || \"\",\n      iconUrl,\n      extraMetadataSpecs: projectUrl == null ? null : `\\n    <projectUrl>${projectUrl}</projectUrl>`,\n      copyright: appInfo.copyright,\n      packageCompressionLevel: parseInt((process.env.ELECTRON_BUILDER_COMPRESSION_LEVEL || packager.compression === \"store\" ? 0 : 9) as any, 10),\n      vendorPath: await getBinFromGithub(\"Squirrel.Windows\", \"1.7.8\", \"p4Z7//ol4qih1xIl2l9lOeFf1RmX4y1eAJkol+3q7iZ0iEMotBhs3HXFLxU435xLRhKghYOjSYu7WiUktsP5Bg==\"),\n      ...this.options as any,\n    }\n\n    if (options.remoteToken == null) {\n      options.remoteToken = process.env.GH_TOKEN || process.env.GITHUB_TOKEN\n    }\n\n    if (!(\"loadingGif\" in options)) {\n      const resourceList = await packager.resourceList\n      if (resourceList.includes(\"install-spinner.gif\")) {\n        options.loadingGif = path.join(packager.buildResourcesDir, \"install-spinner.gif\")\n      }\n    }\n\n    if (this.options.remoteReleases === true) {\n      const info = await packager.info.repositoryInfo\n      if (info == null) {\n        log.warn(\"remoteReleases set to true, but cannot get repository info\")\n      }\n      else {\n        options.remoteReleases = `https://github.com/${info.user}/${info.project}`\n        log.info({remoteReleases: options.remoteReleases}, `remoteReleases is set`)\n      }\n    }\n\n    return options\n  }\n}\n\nfunction checkConflictingOptions(options: any) {\n  for (const name of [\"outputDirectory\", \"appDirectory\", \"exe\", \"fixUpPaths\", \"usePackageJson\", \"extraFileSpecs\", \"extraMetadataSpecs\", \"skipUpdateIcon\", \"setupExe\"]) {\n    if (name in options) {\n      throw new InvalidConfigurationError(`Option ${name} is ignored, do not specify it.`)\n    }\n  }\n\n  if (\"noMsi\" in options) {\n    log.warn(`noMsi is deprecated, please specify as \"msi\": true if you want to create an MSI installer`)\n    options.msi = !options.noMsi\n  }\n\n  const msi = options.msi\n  if (msi != null && typeof msi !== \"boolean\") {\n    throw new InvalidConfigurationError(`msi expected to be boolean value, but string '\"${msi}\"' was specified`)\n  }\n}\n"]}
