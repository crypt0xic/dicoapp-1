"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _runtime = _interopRequireDefault(require("regenerator-runtime/runtime"));

var _lodash = require("lodash");

var _log = _interopRequireDefault(require("./log"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Utility class designed for merging dependencies list with simple validation and duplicate
 * detection.
 *
 * @class
 */
var DependenciesManager =
/*#__PURE__*/
function () {
  /**
   * @param {MeteorDesktop} $                   - context
   * @param {Object}        defaultDependencies - core dependencies list
   * @constructor
   */
  function DependenciesManager($, defaultDependencies) {
    _classCallCheck(this, DependenciesManager);

    this.log = new _log.default('dependenciesManager');
    this.$ = $;
    this.dependencies = defaultDependencies; // Regexes for matching certain types of dependencies version.
    // https://docs.npmjs.com/files/package.json#dependencies

    this.regexes = {
      local: /^(\.\.\/|~\/|\.\/|\/)/,
      git: /^git(\+(ssh|http)s?)?/,
      github: /^\w+-?\w+(?!-)\//,
      http: /^https?.+tar\.gz/,
      file: /^file:/
    }; // Check for commit hashes.

    var gitCheck = {
      type: 'regex',
      regex: /#[a-f0-9]{7,40}/,
      test: 'match',
      message: 'git or github link must have a commit hash'
    }; // Check for displaying warnings when npm package from local path is used.

    var localCheck = {
      onceName: 'localCheck',
      type: 'warning',
      message: 'using dependencies from local paths is permitted' + ' but dangerous - read more in README.md'
    };
    this.checks = {
      local: localCheck,
      file: localCheck,
      git: gitCheck,
      github: gitCheck,
      version: {
        type: 'regex',
        // Matches all the semver ranges operators, empty strings and `*`.
        regex: /[|><= ~-]|\.x|$^|^\*$/,
        test: 'do not match',
        message: 'semver ranges are forbidden, please specify exact version'
      }
    };
  }
  /**
   * Just a public getter.
   * @returns {Object}
   */


  _createClass(DependenciesManager, [{
    key: "getDependencies",
    value: function getDependencies() {
      return this.dependencies;
    }
    /**
     * Returns local dependencies.
     * @returns {Object}
     */

  }, {
    key: "getLocalDependencies",
    value: function getLocalDependencies() {
      var _this = this;

      return Object.keys(this.dependencies).filter(function (dependency) {
        return _this.regexes.local.test(_this.dependencies[dependency]) || _this.regexes.file.test(_this.dependencies[dependency]);
      }).reduce(function (localDependencies, currentDependency) {
        return Object.assign(localDependencies, {
          [currentDependency]: _this.dependencies[currentDependency]
        });
      }, {});
    }
    /**
     * Returns remote dependencies.
     * @returns {Object}
     */

  }, {
    key: "getRemoteDependencies",
    value: function getRemoteDependencies() {
      var _this2 = this;

      return Object.keys(this.dependencies).filter(function (dependency) {
        return !_this2.regexes.local.test(_this2.dependencies[dependency]) && !_this2.regexes.file.test(_this2.dependencies[dependency]);
      }).reduce(function (localDependencies, currentDependency) {
        return Object.assign(localDependencies, {
          [currentDependency]: _this2.dependencies[currentDependency]
        });
      }, {});
    }
    /**
     * Merges dependencies into one list.
     *
     * @param {string} from         - describes where the dependencies were set
     * @param {Object} dependencies - dependencies list
     */

  }, {
    key: "mergeDependencies",
    value: function mergeDependencies(from, dependencies) {
      if (this.validateDependenciesVersions(from, dependencies)) {
        this.detectDuplicatedDependencies(from, dependencies);
        (0, _lodash.assignIn)(this.dependencies, dependencies);
      }
    }
    /**
     * Detects dependency version type.
     * @param {string} version - version string of the dependency
     * @return {string}
     */

  }, {
    key: "detectDependencyVersionType",
    value: function detectDependencyVersionType(version) {
      var _this3 = this;

      var type = Object.keys(this.regexes).find(function (dependencyType) {
        return _this3.regexes[dependencyType].test(version);
      });
      return type || 'version';
    }
    /**
     * Validates semver and detect ranges.
     *
     * @param {string} from         - describes where the dependencies were set
     * @param {Object} dependencies - dependencies list
     */

  }, {
    key: "validateDependenciesVersions",
    value: function validateDependenciesVersions(from, dependencies) {
      var _this4 = this;

      var warningsShown = {};
      (0, _lodash.forEach)(dependencies, function (version, name) {
        var type = _this4.detectDependencyVersionType(version);

        if (_this4.checks[type]) {
          var check = _this4.checks[type];

          if (check.type === 'regex') {
            var checkResult = check.test === 'match' ? _this4.checks[type].regex.test(version) : !_this4.checks[type].regex.test(version);

            if (!checkResult) {
              throw new Error(`dependency ${name}:${version} from ${from} failed version ` + `check with message: ${_this4.checks[type].message}`);
            }
          }

          if (check.type === 'warning' && !warningsShown[check.onceName]) {
            warningsShown[check.onceName] = true;

            _this4.log.warn(`dependency ${name}:${version} from ${from} caused a` + ` warning: ${check.message}`);
          }
        }
      });
      return true;
    }
    /**
     * Detects duplicates.
     *
     * @param {string} from         - describes where the dependencies were set
     * @param {Object} dependencies - dependencies list
     */

  }, {
    key: "detectDuplicatedDependencies",
    value: function detectDuplicatedDependencies(from, dependencies) {
      var _this5 = this;

      var duplicates = (0, _lodash.intersection)(Object.keys(dependencies), Object.keys(this.dependencies));

      if (duplicates.length > 0) {
        duplicates.forEach(function (name) {
          if (dependencies[name] !== _this5.dependencies[name]) {
            throw new Error(`While processing dependencies from ${from}, a dependency ` + `${name}: ${dependencies[name]} was found to be conflicting with a ` + `dependency (${_this5.dependencies[name]}) that was already declared in ` + 'other module or it is used in core of the electron app.');
          }
        });
      }
    }
  }]);

  return DependenciesManager;
}();

exports.default = DependenciesManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,