"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _assignIn = _interopRequireDefault(require("lodash/assignIn"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _electronPackager = _interopRequireDefault(require("electron-packager"));

var _log = _interopRequireDefault(require("./log"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var join = _path.default.join;
/**
 * Wrapper around electron-packager.
 * @class
 */

var ElectronPackager =
/*#__PURE__*/
function () {
  function ElectronPackager($) {
    _classCallCheck(this, ElectronPackager);

    this.log = new _log.default('electron-packager');
    this.$ = $;
  }
  /**
   * Runs the packager with provided arguments.
   *
   * @param {Object} args
   * @returns {Promise}
   */


  _createClass(ElectronPackager, [{
    key: "runPackager",
    value: function runPackager(args) {
      var _this = this;

      return new Promise(function (resolve, reject) {
        (0, _electronPackager.default)(args, function (err) {
          if (err) {
            reject(err);
          } else {
            _this.log.info(`wrote packaged app to ${_this.$.env.paths.packageDir}`);

            resolve();
          }
        });
      });
    }
  }, {
    key: "packageApp",
    value: function () {
      var _packageApp = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var _this2 = this;

        var _JSON$parse, version, settings, name, arch, args, packagerOptions, extracted;

        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _JSON$parse = JSON.parse(_fs.default.readFileSync(join(this.$.env.paths.meteorApp.root, 'node_modules', 'electron', 'package.json'), 'UTF-8')), version = _JSON$parse.version;
                settings = this.$.desktop.getSettings();
                name = settings.name;

                if (!name) {
                  this.log.error('`name` field in settings.json not set');
                  process.exit(1);
                }

                arch = this.$.env.options.ia32 ? 'ia32' : 'x64';
                this.log.info(`packaging '${name}' for platform '${this.$.env.sys.platform}-${arch}'` + ` using electron v${version}`);
                _context.prev = 6;
                _context.next = 9;
                return this.$.utils.rmWithRetries('-rf', _path.default.join(this.$.env.options.output, this.$.env.paths.packageDir));

              case 9:
                _context.next = 14;
                break;

              case 11:
                _context.prev = 11;
                _context.t0 = _context["catch"](6);
                throw new Error(_context.t0);

              case 14:
                args = {
                  name,
                  arch,
                  prune: false,
                  electronVersion: version,
                  platform: this.$.env.sys.platform,
                  dir: this.$.env.paths.electronApp.root,
                  out: _path.default.join(this.$.env.options.output, this.$.env.paths.packageDir)
                };

                if ('packagerOptions' in settings) {
                  packagerOptions = settings.packagerOptions;
                  ['windows', 'linux', 'osx'].forEach(function (system) {
                    if (_this2.$.env.os[`is${system[0].toUpperCase()}${system.substring(1)}`] && `_${system}` in packagerOptions) {
                      (0, _assignIn.default)(packagerOptions, packagerOptions[`_${system}`]);
                    }
                  });
                  Object.keys(packagerOptions).forEach(function (field) {
                    if (packagerOptions[field] === '@version') {
                      packagerOptions[field] = settings.version;
                    }
                  });
                  (0, _assignIn.default)(args, packagerOptions);
                } // Move node_modules away. We do not want to delete it, just temporarily remove it from
                // our way.


                _fs.default.renameSync(this.$.env.paths.electronApp.nodeModules, this.$.env.paths.electronApp.tmpNodeModules);

                extracted = false;

                if (this.$.utils.exists(this.$.env.paths.electronApp.extractedNodeModules)) {
                  _fs.default.renameSync(this.$.env.paths.electronApp.extractedNodeModules, this.$.env.paths.electronApp.nodeModules);

                  extracted = true;
                }

                _context.prev = 19;
                _context.next = 22;
                return this.runPackager(args);

              case 22:
                _context.prev = 22;

                if (extracted) {
                  _shelljs.default.rm('-rf', this.$.env.paths.electronApp.extractedNodeModules);

                  _shelljs.default.rm('-rf', this.$.env.paths.electronApp.nodeModules);
                } // Move node_modules back.


                _fs.default.renameSync(this.$.env.paths.electronApp.tmpNodeModules, this.$.env.paths.electronApp.nodeModules);

                return _context.finish(22);

              case 26:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[6, 11], [19,, 22, 26]]);
      }));

      return function packageApp() {
        return _packageApp.apply(this, arguments);
      };
    }()
  }]);

  return ElectronPackager;
}();

exports.default = ElectronPackager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,