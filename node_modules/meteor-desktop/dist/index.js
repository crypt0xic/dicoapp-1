"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = _exports;

var _runtime = _interopRequireDefault(require("regenerator-runtime/runtime"));

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _env = _interopRequireDefault(require("./env"));

var _electron = _interopRequireDefault(require("./electron"));

var _log = _interopRequireDefault(require("./log"));

var _desktop = _interopRequireDefault(require("./desktop"));

var _electronApp = _interopRequireDefault(require("./electronApp"));

var _meteorApp = _interopRequireDefault(require("./meteorApp"));

var _electronBuilder = _interopRequireDefault(require("./electronBuilder"));

var _packager = _interopRequireDefault(require("./packager"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

_shelljs.default.config.fatal = true;
/**
 * Exists
 * @param {string} pathToCheck
 * @returns {boolean}
 */

function exists(pathToCheck) {
  try {
    _fs.default.accessSync(pathToCheck);

    return true;
  } catch (e) {
    return false;
  }
}
/**
 * Symlink exists
 * @param {string} pathToCheck
 * @returns {boolean}
 */


function symlinkExists(pathToCheck) {
  try {
    _fs.default.readlinkSync(pathToCheck);

    return true;
  } catch (e) {
    return false;
  }
}
/**
 * Simple wrapper for shelljs.rm with additional retries in case of failure.
 * It is useful when something is concurrently reading the dir you want to remove.
 */


function rmWithRetries() {
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  var retries = 0;
  return new Promise(function (resolve, reject) {
    function rm() {
      for (var _len2 = arguments.length, rmArgs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        rmArgs[_key2] = arguments[_key2];
      }

      try {
        _shelljs.default.config.fatal = true;

        _shelljs.default.rm.apply(_shelljs.default, rmArgs);

        _shelljs.default.config.reset();

        resolve();
      } catch (e) {
        retries += 1;

        if (retries < 5) {
          setTimeout(function () {
            rm.apply(void 0, rmArgs);
          }, 100);
        } else {
          _shelljs.default.config.reset();

          reject(e);
        }
      }
    }

    rm.apply(void 0, args);
  });
}
/**
 * Main entity.
 * @class
 * @property {Env} env
 * @property {Electron} electron
 * @property {InstallerBuilder} installerBuilder
 * @property {ElectronApp} electronApp
 * @property {Desktop} desktop
 * @property {MeteorApp} meteorApp
 */


var MeteorDesktop =
/*#__PURE__*/
function () {
  /**
   * @param {string} input        - Meteor app dir
   * @param {string} output       - output dir for bundle/package/installer
   * @param {Object} options      - options from cli.js
   * @param {Object} dependencies - dependencies object
   * @constructor
   */
  function MeteorDesktop(input, output, options, dependencies) {
    _classCallCheck(this, MeteorDesktop);

    var Log = dependencies.log;
    this.log = new Log('index');
    this.version = this.getVersion();
    this.log.info('initializing');
    this.env = new _env.default(input, output, options);
    this.electron = new _electron.default(this);
    this.electronBuilder = new _electronBuilder.default(this);
    this.electronApp = new _electronApp.default(this);
    this.desktop = new _desktop.default(this);
    this.meteorApp = new _meteorApp.default(this);
    this.packager = new _packager.default(this);
    this.utils = {
      exists,
      rmWithRetries,
      symlinkExists
    };
  }
  /**
   * Tries to read the version from our own package.json.
   *
   * @returns {string}
   */


  _createClass(MeteorDesktop, [{
    key: "getVersion",
    value: function getVersion() {
      if (this.version) {
        return this.version;
      }

      var version = null;

      try {
        var _JSON$parse = JSON.parse(_fs.default.readFileSync(_path.default.join(__dirname, '..', 'package.json'), 'UTF-8'));

        version = _JSON$parse.version;
      } catch (e) {
        this.log.error(`error while trying to read ${_path.default.join(__dirname, 'package.json')}`, e);
        process.exit(1);
      }

      return version;
    }
    /**
     * Tries to read the version from our own package.json.
     *
     * @returns {string}
     */

  }, {
    key: "getElectronVersion",
    value: function getElectronVersion() {
      var version = null;

      try {
        version = JSON.parse(_fs.default.readFileSync(_path.default.join(__dirname, '..', 'package.json'), 'UTF-8')).dependencies.electron;
      } catch (e) {
        this.log.error(`error while trying to read ${_path.default.join(__dirname, 'package.json')}` + 'or the electron version from it', e);
        process.exit(1);
      }

      return version;
    }
  }, {
    key: "init",
    value: function init() {
      this.desktop.scaffold();
      this.meteorApp.updateGitIgnore();
    }
  }, {
    key: "buildInstaller",
    value: function () {
      var _buildInstaller = _asyncToGenerator(
      /*#__PURE__*/
      _runtime.default.mark(function _callee() {
        return _runtime.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.env.options.installerBuild = true;
                _context.next = 3;
                return this.electronApp.build();

              case 3:
                _context.prev = 3;
                _context.next = 6;
                return this.electronBuilder.build();

              case 6:
                _context.next = 11;
                break;

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](3);
                this.log.error('error occurred while building installer', _context.t0);

              case 11:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[3, 8]]);
      }));

      return function buildInstaller() {
        return _buildInstaller.apply(this, arguments);
      };
    }()
  }, {
    key: "run",
    value: function () {
      var _run = _asyncToGenerator(
      /*#__PURE__*/
      _runtime.default.mark(function _callee2() {
        return _runtime.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.electronApp.build(true);

              case 2:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      return function run() {
        return _run.apply(this, arguments);
      };
    }()
  }, {
    key: "build",
    value: function () {
      var _build = _asyncToGenerator(
      /*#__PURE__*/
      _runtime.default.mark(function _callee3() {
        return _runtime.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.electronApp.build();

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function build() {
        return _build.apply(this, arguments);
      };
    }()
  }, {
    key: "justRun",
    value: function justRun() {
      this.electron.run();
    }
  }, {
    key: "runPackager",
    value: function () {
      var _runPackager = _asyncToGenerator(
      /*#__PURE__*/
      _runtime.default.mark(function _callee4() {
        var _this = this;

        return _runtime.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return this.electronApp.build();

              case 2:
                this.packager.packageApp().catch(function (e) {
                  _this.log.error(`while trying to build a package an error occurred: ${e}`);
                });

              case 3:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      return function runPackager() {
        return _runPackager.apply(this, arguments);
      };
    }()
  }]);

  return MeteorDesktop;
}();

function _exports(input, output, options) {
  var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {
    log: _log.default
  },
      _ref$log = _ref.log,
      log = _ref$log === void 0 ? _log.default : _ref$log;

  return new MeteorDesktop(input, output, options, {
    log
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,