"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _runtime = _interopRequireDefault(require("regenerator-runtime/runtime"));

var _fs = _interopRequireDefault(require("fs"));

var _del = _interopRequireDefault(require("del"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _path = _interopRequireDefault(require("path"));

var _log = _interopRequireDefault(require("./log"));

var _skeletonDependencies = _interopRequireDefault(require("./skeletonDependencies"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var join = _path.default.join;
_shelljs.default.config.fatal = true;
/**
 * Represents the .desktop dir scaffold.
 */

var ElectronAppScaffold =
/*#__PURE__*/
function () {
  /**
   * @param {MeteorDesktop} $ - context
   * @constructor
   */
  function ElectronAppScaffold($) {
    _classCallCheck(this, ElectronAppScaffold);

    this.log = new _log.default('electronAppScaffold');
    this.$ = $;
    this.packageJson = {
      name: 'MyMeteorApp',
      main: this.$.env.isProductionBuild() ? 'app.asar/index.js' : 'app/index.js',
      dependencies: Object.assign({}, _skeletonDependencies.default)
    };

    if (!this.$.env.isProductionBuild()) {
      this.packageJson.dependencies.devtron = '1.4.0';
      this.packageJson.dependencies['electron-debug'] = '1.1.0';
    }
  }
  /**
   * Just a public getter from the default package.json object.
   * @returns {Object}
   */


  _createClass(ElectronAppScaffold, [{
    key: "getDefaultPackageJson",
    value: function getDefaultPackageJson() {
      return Object.assign({}, this.packageJson);
    }
    /**
     * Clear the electron app. Removes everything except the node_modules which would be a waste
     * to delete. Later `npm prune` will keep it clear.
     */

  }, {
    key: "clear",
    value: function clear() {
      if (!this.$.utils.exists(this.$.env.paths.electronApp.root)) {
        this.log.verbose(`creating ${this.$.env.paths.electronApp.rootName}`);

        _shelljs.default.mkdir(this.$.env.paths.electronApp.root);
      }

      return (0, _del.default)([`${this.$.env.paths.electronApp.root}${_path.default.sep}*`, `!${this.$.env.paths.electronApp.nodeModules}`]);
    }
    /**
     * Just copies the Skeleton App into the electron app.
     */

  }, {
    key: "copySkeletonApp",
    value: function copySkeletonApp() {
      this.log.verbose('copying skeleton app');

      try {
        _shelljs.default.cp('-rf', join(this.$.env.paths.meteorDesktop.skeleton, '*'), this.$.env.paths.electronApp.appRoot + _path.default.sep);
      } catch (e) {
        this.log.error('error while copying skeleton app:', e);
        process.exit(1);
      }
    }
    /**
     * After clearing the electron app path, copies a fresh skeleton.
     */

  }, {
    key: "make",
    value: function () {
      var _make = _asyncToGenerator(
      /*#__PURE__*/
      _runtime.default.mark(function _callee() {
        return _runtime.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.prev = 0;
                this.log.verbose(`clearing ${this.$.env.paths.electronApp.rootName}`);
                _context.next = 4;
                return this.clear();

              case 4:
                _context.next = 10;
                break;

              case 6:
                _context.prev = 6;
                _context.t0 = _context["catch"](0);
                this.log.error(`error while removing ${this.$.env.paths.electronApp.root}: `, _context.t0);
                process.exit(1);

              case 10:
                this.createAppRoot();
                this.copySkeletonApp(); // TODO: hey, wait, .gitignore is not needed - right?

                /*
                this.log.debug('creating .gitignore');
                fs.writeFileSync(this.$.env.paths.electronApp.gitIgnore, [
                    'node_modules'
                ].join('\n'));
                */

                this.log.verbose('writing package.json');

                _fs.default.writeFileSync(this.$.env.paths.electronApp.packageJson, JSON.stringify(this.packageJson, null, 2));

              case 14:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[0, 6]]);
      }));

      return function make() {
        return _make.apply(this, arguments);
      };
    }()
    /**
     * Creates the app directory in the electron app.
     */

  }, {
    key: "createAppRoot",
    value: function createAppRoot() {
      try {
        this.log.verbose(`creating ${this.$.env.paths.electronApp.appRoot}`);

        _fs.default.mkdirSync(this.$.env.paths.electronApp.appRoot);
      } catch (e) {
        if (e.code !== 'EEXIST') {
          this.log.error(`error while creating dir: ${this.$.env.paths.electronApp.appRoot}: `, e);
          process.exit(1);
        }
      }
    }
  }]);

  return ElectronAppScaffold;
}();

exports.default = ElectronAppScaffold;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,