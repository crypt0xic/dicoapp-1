"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _asar = _interopRequireDefault(require("asar"));

var _assignIn = _interopRequireDefault(require("lodash/assignIn"));

var _lodash = _interopRequireDefault(require("lodash"));

var _installLocal = require("install-local");

var _core = require("@babel/core");

var _crypto = _interopRequireDefault(require("crypto"));

var _del = _interopRequireDefault(require("del"));

var _presetEnv = _interopRequireDefault(require("@babel/preset-env"));

var _fs = _interopRequireDefault(require("fs"));

var _glob = _interopRequireDefault(require("glob"));

var _path = _interopRequireDefault(require("path"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _crossSpawn = _interopRequireDefault(require("cross-spawn"));

var _semver = _interopRequireDefault(require("semver"));

var _uglifyEs = _interopRequireDefault(require("uglify-es"));

var _yarn = require("electron-builder-lib/out/util/yarn");

var _log = _interopRequireDefault(require("./log"));

var _electronAppScaffold = _interopRequireDefault(require("./electronAppScaffold"));

var _dependenciesManager = _interopRequireDefault(require("./dependenciesManager"));

var _binaryModulesDetector = _interopRequireDefault(require("./binaryModulesDetector"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

_shelljs.default.config.fatal = true;
/**
 * Represents the .desktop dir scaffold.
 * @class
 */

var ElectronApp =
/*#__PURE__*/
function () {
  /**
   * @param {MeteorDesktop} $ - context
   * @constructor
   */
  function ElectronApp($) {
    _classCallCheck(this, ElectronApp);

    this.log = new _log.default('electronApp');
    this.scaffold = new _electronAppScaffold.default($);
    this.depsManager = new _dependenciesManager.default($, this.scaffold.getDefaultPackageJson().dependencies);
    this.$ = $;
    this.meteorApp = this.$.meteorApp;
    this.packageJson = null;
    this.version = null;
    this.compatibilityVersion = null;
  }
  /**
   * Makes an app.asar from the skeleton app.
   * @property {Array} excludeFromDel - list of paths to exclude from deleting
   * @returns {Promise}
   */


  _createClass(ElectronApp, [{
    key: "packSkeletonToAsar",
    value: function packSkeletonToAsar() {
      var _this = this;

      var excludeFromDel = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      this.log.info('packing skeleton app and node_modules to asar archive');
      return new Promise(function (resolve) {
        var extract = _this.getModulesToExtract(); // We want to pack skeleton app and node_modules together, so we need to temporarily
        // move node_modules to app dir.


        _this.log.debug('moving node_modules to app dir');

        _fs.default.renameSync(_this.$.env.paths.electronApp.nodeModules, _path.default.join(_this.$.env.paths.electronApp.appRoot, 'node_modules'));

        var extracted = false;
        extracted = _this.extractModules(extract);

        _this.log.debug('packing');

        _asar.default.createPackage(_this.$.env.paths.electronApp.appRoot, _this.$.env.paths.electronApp.appAsar, function () {
          // Lets move the node_modules back.
          _this.log.debug('moving node_modules back from app dir');

          _shelljs.default.mv(_path.default.join(_this.$.env.paths.electronApp.appRoot, 'node_modules'), _this.$.env.paths.electronApp.nodeModules);

          if (extracted) {
            // We need to create a full node modules back. In other words we want
            // the extracted modules back.
            extract.forEach(function (module) {
              return _shelljs.default.cp('-rf', _path.default.join(_this.$.env.paths.electronApp.extractedNodeModules, module), _path.default.join(_this.$.env.paths.electronApp.nodeModules, module));
            }); // Get the .bin back.

            if (_this.$.utils.exists(_this.$.env.paths.electronApp.extractedNodeModulesBin)) {
              _shelljs.default.cp(_path.default.join(_this.$.env.paths.electronApp.extractedNodeModulesBin, '*'), _path.default.join(_this.$.env.paths.electronApp.nodeModules, '.bin'));
            }
          }

          _this.log.debug('deleting source files');

          var exclude = [_this.$.env.paths.electronApp.nodeModules].concat([_this.$.env.paths.electronApp.appAsar, _this.$.env.paths.electronApp.packageJson], excludeFromDel);

          _del.default.sync([`${_this.$.env.paths.electronApp.root}${_path.default.sep}*`].concat(exclude.map(function (pathToExclude) {
            return `!${pathToExclude}`;
          })));

          resolve();
        });
      });
    }
    /**
     * Moves specified node modules to a separate directory.
     * @param {Array} extract
     * @returns {boolean}
     */

  }, {
    key: "extractModules",
    value: function extractModules(extract) {
      var _this2 = this;

      var ext = ['.js', '.bat', '.sh', '.cmd', ''];

      if (extract.length > 0) {
        if (this.$.utils.exists(this.$.env.paths.electronApp.extractedNodeModules)) {
          _shelljs.default.rm('-rf', this.$.env.paths.electronApp.extractedNodeModules);
        }

        _fs.default.mkdirSync(this.$.env.paths.electronApp.extractedNodeModules);

        _fs.default.mkdirSync(this.$.env.paths.electronApp.extractedNodeModulesBin);

        extract.forEach(function (module) {
          _fs.default.renameSync(_path.default.join(_this2.$.env.paths.electronApp.appRoot, 'node_modules', module), _path.default.join(_this2.$.env.paths.electronApp.extractedNodeModules, module)); // Move bins.


          _this2.extractBin(module, ext);
        });
        return true;
      }

      return false;
    }
    /**
     * Extracts the bin files associated with a certain node modules.
     *
     * @param module
     * @param ext
     */

  }, {
    key: "extractBin",
    value: function extractBin(module, ext) {
      var _this3 = this;

      var packageJson;

      try {
        packageJson = JSON.parse(_fs.default.readFileSync(_path.default.join(this.$.env.paths.electronApp.extractedNodeModules, module, 'package.json'), 'utf8'));
      } catch (e) {
        packageJson = {};
      }

      var bins = 'bin' in packageJson && typeof packageJson.bin === 'object' ? Object.keys(packageJson.bin) : [];

      if (bins.length > 0) {
        bins.forEach(function (bin) {
          ext.forEach(function (extension) {
            var binFilePath = _path.default.join(_this3.$.env.paths.electronApp.appRoot, 'node_modules', '.bin', `${bin}${extension}`);

            if (_this3.$.utils.exists(binFilePath) || _this3.$.utils.symlinkExists(binFilePath)) {
              _fs.default.renameSync(binFilePath, _path.default.join(_this3.$.env.paths.electronApp.extractedNodeModulesBin, `${bin}${extension}`));
            }
          });
        });
      }
    }
    /**
     * Merges the `extract` field with automatically detected modules.
     */

  }, {
    key: "getModulesToExtract",
    value: function getModulesToExtract() {
      var binaryModulesDetector = new _binaryModulesDetector.default(this.$.env.paths.electronApp.nodeModules);
      var toBeExtracted = binaryModulesDetector.detect();

      var _$$desktop$getSetting = this.$.desktop.getSettings(),
          extract = _$$desktop$getSetting.extract;

      if (!Array.isArray(extract)) {
        extract = [];
      }

      var merge = {};
      toBeExtracted.concat(extract).forEach(function (module) {
        merge[module] = true;
      });
      extract = Object.keys(merge);

      if (extract.length > 0) {
        this.log.verbose(`resultant modules to extract list is: ${extract.join(', ')}`);
      }

      return extract;
    }
    /**
     * Calculates a md5 from all dependencies.
     */

  }, {
    key: "calculateCompatibilityVersion",
    value: function calculateCompatibilityVersion() {
      this.log.verbose('calculating compatibility version');
      var settings = this.$.desktop.getSettings();

      if ('desktopHCPCompatibilityVersion' in settings) {
        this.compatibilityVersion = `${settings.desktopHCPCompatibilityVersion}`;
        this.log.warn(`compatibility version overridden to ${this.compatibilityVersion}`);
        return;
      }

      var md5 = _crypto.default.createHash('md5');

      var dependencies = this.depsManager.getDependencies();
      var dependenciesSorted = Object.keys(dependencies).sort();
      dependencies = dependenciesSorted.map(function (dependency) {
        return `${dependency}:${dependencies[dependency]}`;
      });
      var mainCompatibilityVersion = this.$.getVersion().split('.');
      this.log.debug('meteor-desktop compatibility version is ', `${mainCompatibilityVersion[0]}.${mainCompatibilityVersion[1]}`);
      dependencies.push(`meteor-desktop:${mainCompatibilityVersion[0]}.${mainCompatibilityVersion[1]}`);
      var desktopCompatibilityVersion = settings.version.split('.')[0];
      this.log.debug('.desktop compatibility version is ', desktopCompatibilityVersion);
      dependencies.push(`desktop-app:${desktopCompatibilityVersion}`);

      if (process.env.METEOR_DESKTOP_DEBUG_DESKTOP_COMPATIBILITY_VERSION || process.env.METEOR_DESKTOP_DEBUG) {
        this.log.debug(`compatibility version calculated from ${JSON.stringify(dependencies)}`);
      }

      md5.update(JSON.stringify(dependencies));
      this.compatibilityVersion = md5.digest('hex');
    }
    /**
     * Runs all necessary tasks to build the desktopified app.
     */

  }, {
    key: "build",
    value: function () {
      var _build = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee() {
        var run,
            nodeModulesRemoved,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                run = _args.length > 0 && _args[0] !== undefined ? _args[0] : false;
                // TODO: refactor to a task runner
                this.log.info('scaffolding');

                if (!this.$.desktop.check()) {
                  if (!this.$.env.options.scaffold) {
                    this.log.error('seems that you do not have a .desktop dir in your project or it is' + ' corrupted. Run \'npm run desktop -- init\' to get a new one.'); // Do not fail, so that npm will not print his error stuff to console.

                    process.exit(0);
                  } else {
                    this.$.desktop.scaffold();
                    this.$.meteorApp.updateGitIgnore();
                  }
                }

                try {
                  this.$.meteorApp.updateGitIgnore();
                } catch (e) {
                  this.log.warn(`error occurred while adding ${this.$.env.paths.electronApp.rootName}` + 'to .gitignore: ', e);
                }

                _context.prev = 4;
                _context.next = 7;
                return this.$.meteorApp.ensureDesktopHCPPackages();

              case 7:
                _context.next = 13;
                break;

              case 9:
                _context.prev = 9;
                _context.t0 = _context["catch"](4);
                this.log.error('error while checking for required packages: ', _context.t0);
                process.exit(1);

              case 13:
                _context.prev = 13;
                _context.next = 16;
                return this.scaffold.make();

              case 16:
                _context.next = 22;
                break;

              case 18:
                _context.prev = 18;
                _context.t1 = _context["catch"](13);
                this.log.error('error while scaffolding: ', _context.t1);
                process.exit(1);

              case 22:
                try {
                  this.updatePackageJsonFields();
                } catch (e) {
                  this.log.error('error while updating package.json: ', e);
                }

                try {
                  this.updateDependenciesList();
                } catch (e) {
                  this.log.error('error while merging dependencies list: ', e);
                }

                try {
                  this.calculateCompatibilityVersion();
                } catch (e) {
                  this.log.error('error while calculating compatibility version: ', e);
                  process.exit(1);
                }

                _context.prev = 25;
                _context.next = 28;
                return this.handleTemporaryNodeModules();

              case 28:
                _context.next = 34;
                break;

              case 30:
                _context.prev = 30;
                _context.t2 = _context["catch"](25);
                this.log.error('error occurred while handling temporary node_modules: ', _context.t2);
                process.exit(1);

              case 34:
                _context.prev = 34;
                _context.next = 37;
                return this.handleStateOfNodeModules();

              case 37:
                nodeModulesRemoved = _context.sent;
                _context.next = 44;
                break;

              case 40:
                _context.prev = 40;
                _context.t3 = _context["catch"](34);
                this.log.error('error occurred while clearing node_modules: ', _context.t3);
                process.exit(1);

              case 44:
                _context.prev = 44;
                _context.next = 47;
                return this.linkNpmPackages();

              case 47:
                _context.next = 53;
                break;

              case 49:
                _context.prev = 49;
                _context.t4 = _context["catch"](44);
                this.log.error(`linking packages failed: ${_context.t4}`);
                process.exit(1);

              case 53:
                _context.prev = 53;
                _context.next = 56;
                return this.rebuildDeps(true);

              case 56:
                _context.next = 62;
                break;

              case 58:
                _context.prev = 58;
                _context.t5 = _context["catch"](53);
                this.log.error('error occurred while installing node_modules: ', _context.t5);
                process.exit(1);

              case 62:
                if (nodeModulesRemoved) {
                  _context.next = 72;
                  break;
                }

                _context.prev = 63;
                _context.next = 66;
                return this.rebuildDeps();

              case 66:
                _context.next = 72;
                break;

              case 68:
                _context.prev = 68;
                _context.t6 = _context["catch"](63);
                this.log.error('error occurred while rebuilding native node modules: ', _context.t6);
                process.exit(1);

              case 72:
                _context.prev = 72;
                _context.next = 75;
                return this.installLocalNodeModules();

              case 75:
                _context.next = 81;
                break;

              case 77:
                _context.prev = 77;
                _context.t7 = _context["catch"](72);
                this.log.error('error occurred while installing local node modules: ', _context.t7);
                process.exit(1);

              case 81:
                _context.prev = 81;
                _context.next = 84;
                return this.ensureMeteorDependencies();

              case 84:
                _context.next = 90;
                break;

              case 86:
                _context.prev = 86;
                _context.t8 = _context["catch"](81);
                this.log.error('error occurred while ensuring meteor dependencies are installed: ', _context.t8);
                process.exit(1);

              case 90:
                if (!this.$.env.isProductionBuild()) {
                  _context.next = 100;
                  break;
                }

                _context.prev = 91;
                _context.next = 94;
                return this.packSkeletonToAsar();

              case 94:
                _context.next = 100;
                break;

              case 96:
                _context.prev = 96;
                _context.t9 = _context["catch"](91);
                this.log.error('error while packing skeleton to asar: ', _context.t9);
                process.exit(1);

              case 100:
                // TODO: find a way to avoid copying .desktop to a temp location
                try {
                  this.copyDesktopToDesktopTemp();
                } catch (e) {
                  this.log.error('error while copying .desktop to a temporary location: ', e);
                  process.exit(1);
                }

                try {
                  this.updateSettingsJsonFields();
                } catch (e) {
                  this.log.error('error while updating settings.json: ', e);
                  process.exit(1);
                }

                _context.prev = 102;
                _context.next = 105;
                return this.excludeFilesFromArchive();

              case 105:
                _context.next = 111;
                break;

              case 107:
                _context.prev = 107;
                _context.t10 = _context["catch"](102);
                this.log.error('error while excluding files from packing to asar: ', _context.t10);
                process.exit(1);

              case 111:
                try {
                  this.transpileAndMinify();
                } catch (e) {
                  this.log.error('error while transpiling or minifying: ', e);
                }

                _context.prev = 112;
                _context.next = 115;
                return this.packDesktopToAsar();

              case 115:
                _context.next = 121;
                break;

              case 117:
                _context.prev = 117;
                _context.t11 = _context["catch"](112);
                this.log.error('error occurred while packing .desktop to asar: ', _context.t11);
                process.exit(1);

              case 121:
                _context.prev = 121;
                _context.next = 124;
                return this.getMeteorClientBuild();

              case 124:
                _context.next = 129;
                break;

              case 126:
                _context.prev = 126;
                _context.t12 = _context["catch"](121);
                this.log.error('error occurred during getting meteor mobile build: ', _context.t12);

              case 129:
                if (run) {
                  this.log.info('running');
                  this.$.electron.run();
                } else {
                  this.log.info('built');
                }

              case 130:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[4, 9], [13, 18], [25, 30], [34, 40], [44, 49], [53, 58], [63, 68], [72, 77], [81, 86], [91, 96], [102, 107], [112, 117], [121, 126]]);
      }));

      return function build() {
        return _build.apply(this, arguments);
      };
    }()
    /**
     * Ensures all required dependencies are added to the Meteor project.
     * @returns {Promise.<void>}
     */

  }, {
    key: "ensureMeteorDependencies",
    value: function () {
      var _ensureMeteorDependencies = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var _this4 = this;

        var packages, packagesWithVersion, plugins;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                packages = [];
                packagesWithVersion = [];
                plugins = 'plugins [';
                Object.keys(this.$.desktop.getDependencies().plugins).forEach(function (plugin) {
                  // Read package.json of the plugin.
                  var packageJson = JSON.parse(_fs.default.readFileSync(_path.default.join(_this4.$.env.paths.electronApp.nodeModules, plugin, 'package.json'), 'utf8'));

                  if ('meteorDependencies' in packageJson && typeof packageJson.meteorDependencies === 'object') {
                    plugins += `${plugin}, `;
                    packages.unshift.apply(packages, _toConsumableArray(Object.keys(packageJson.meteorDependencies)));
                    packagesWithVersion.unshift.apply(packagesWithVersion, _toConsumableArray(packages.map(function (packageName) {
                      if (packageJson.meteorDependencies[packageName] === '@version') {
                        return `${packageName}@${packageJson.version}`;
                      }

                      return `${packageName}@${packageJson.meteorDependencies[packageName]}`;
                    })));
                  }
                });

                if (!(packages.length > 0)) {
                  _context2.next = 14;
                  break;
                }

                plugins = `${plugins.substr(0, plugins.length - 2)}]`;
                _context2.prev = 6;
                _context2.next = 9;
                return this.$.meteorApp.meteorManager.ensurePackages(packages, packagesWithVersion, plugins);

              case 9:
                _context2.next = 14;
                break;

              case 11:
                _context2.prev = 11;
                _context2.t0 = _context2["catch"](6);
                throw new Error(_context2.t0);

              case 14:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[6, 11]]);
      }));

      return function ensureMeteorDependencies() {
        return _ensureMeteorDependencies.apply(this, arguments);
      };
    }()
    /**
     * Builds meteor app.
     */

  }, {
    key: "getMeteorClientBuild",
    value: function () {
      var _getMeteorClientBuild = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return this.$.meteorApp.build();

              case 2:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      return function getMeteorClientBuild() {
        return _getMeteorClientBuild.apply(this, arguments);
      };
    }()
    /**
     * Removes node_modules if needed.
     * @returns {Promise<void>}
     */

  }, {
    key: "handleStateOfNodeModules",
    value: function () {
      var _handleStateOfNodeModules = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee4() {
        return regeneratorRuntime.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                if (!(this.$.env.isProductionBuild() || this.$.env.options.ia32)) {
                  _context4.next = 11;
                  break;
                }

                if (!this.$.env.isProductionBuild()) {
                  this.log.info('clearing node_modules because we need to have it clear for ia32 rebuild');
                } else {
                  this.log.info('clearing node_modules because this is a production build');
                }

                _context4.prev = 2;
                _context4.next = 5;
                return this.$.utils.rmWithRetries('-rf', this.$.env.paths.electronApp.nodeModules);

              case 5:
                _context4.next = 10;
                break;

              case 7:
                _context4.prev = 7;
                _context4.t0 = _context4["catch"](2);
                throw new Error(_context4.t0);

              case 10:
                return _context4.abrupt("return", true);

              case 11:
                return _context4.abrupt("return", false);

              case 12:
              case "end":
                return _context4.stop();
            }
          }
        }, _callee4, this, [[2, 7]]);
      }));

      return function handleStateOfNodeModules() {
        return _handleStateOfNodeModules.apply(this, arguments);
      };
    }()
    /**
     * If there is a temporary node_modules folder and no node_modules folder, we will
     * restore it, as it might be a leftover from an interrupted flow.
     * @returns {Promise<void>}
     */

  }, {
    key: "handleTemporaryNodeModules",
    value: function () {
      var _handleTemporaryNodeModules = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee5() {
        return regeneratorRuntime.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                if (!this.$.utils.exists(this.$.env.paths.electronApp.tmpNodeModules)) {
                  _context5.next = 15;
                  break;
                }

                if (this.$.utils.exists(this.$.env.paths.electronApp.nodeModules)) {
                  _context5.next = 6;
                  break;
                }

                this.log.debug('moving temp node_modules back');

                _shelljs.default.mv(this.$.env.paths.electronApp.tmpNodeModules, this.$.env.paths.electronApp.nodeModules);

                _context5.next = 15;
                break;

              case 6:
                // If there is a node_modules folder, we should clear the temporary one.
                this.log.debug('clearing temp node_modules because new one is already created');
                _context5.prev = 7;
                _context5.next = 10;
                return this.$.utils.rmWithRetries('-rf', this.$.env.paths.electronApp.tmpNodeModules);

              case 10:
                _context5.next = 15;
                break;

              case 12:
                _context5.prev = 12;
                _context5.t0 = _context5["catch"](7);
                throw new Error(_context5.t0);

              case 15:
              case "end":
                return _context5.stop();
            }
          }
        }, _callee5, this, [[7, 12]]);
      }));

      return function handleTemporaryNodeModules() {
        return _handleTemporaryNodeModules.apply(this, arguments);
      };
    }()
    /**
     * NOT IN USE RIGHT NOW // DEPRECATED
     *
     * Wrapper for spawning npm.
     * @param {Array}  commands - commands for spawn
     * @param {string} stdio
     * @return {Promise}
     */

  }, {
    key: "runNpm",
    value: function runNpm(commands) {
      var _this5 = this;

      var stdio = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'ignore';
      return new Promise(function (resolve, reject) {
        // TODO: find a way to run npm without depending on it cause it's a huge dependency.
        var npm = _path.default.join(_this5.$.env.paths.meteorApp.root, 'node_modules', '.bin', 'npm');

        if (!_this5.$.utils.exists(npm)) {
          npm = _path.default.join(_this5.$.env.paths.meteorApp.root, 'node_modules', 'meteor-desktop', 'node_modules', '.bin', 'npm');
        }

        if (!_this5.$.utils.exists(npm)) {
          npm = _shelljs.default.which('npm');
        }

        _this5.log.verbose(`executing npm ${commands.join(' ')}`);

        (0, _crossSpawn.default)(npm, commands, {
          cwd: _this5.$.env.paths.electronApp.root,
          stdio
        }).on('exit', function (code) {
          return code === 0 ? resolve() : reject(new Error(`npm exit code was ${code}`));
        });
      });
    }
    /**
     * Runs npm link for every package specified in settings.json->linkPackages.
     */

  }, {
    key: "linkNpmPackages",
    value: function () {
      var _linkNpmPackages = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee6() {
        var _this6 = this;

        var settings, promises;
        return regeneratorRuntime.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                settings = this.$.desktop.getSettings();
                promises = [];

                if ('linkPackages' in this.$.desktop.getSettings()) {
                  if (Array.isArray(settings.linkPackages)) {
                    settings.linkPackages.forEach(function (packageName) {
                      return promises.push(_this6.runNpm(['link', packageName]));
                    });
                  }
                }

                _context6.next = 5;
                return Promise.all(promises);

              case 5:
              case "end":
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      return function linkNpmPackages() {
        return _linkNpmPackages.apply(this, arguments);
      };
    }()
    /**
     * Runs npm in the electron app to get the dependencies installed.
     * @returns {Promise}
     */

  }, {
    key: "ensureDeps",
    value: function () {
      var _ensureDeps = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee7() {
        return regeneratorRuntime.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                this.log.info('installing dependencies');

                if (!this.$.utils.exists(this.$.env.paths.electronApp.nodeModules)) {
                  _context7.next = 11;
                  break;
                }

                this.log.debug('running npm prune to wipe unneeded dependencies');
                _context7.prev = 3;
                _context7.next = 6;
                return this.runNpm(['prune']);

              case 6:
                _context7.next = 11;
                break;

              case 8:
                _context7.prev = 8;
                _context7.t0 = _context7["catch"](3);
                throw new Error(_context7.t0);

              case 11:
                _context7.prev = 11;
                _context7.next = 14;
                return this.runNpm(['install'], this.$.env.stdio);

              case 14:
                _context7.next = 19;
                break;

              case 16:
                _context7.prev = 16;
                _context7.t1 = _context7["catch"](11);
                throw new Error(_context7.t1);

              case 19:
              case "end":
                return _context7.stop();
            }
          }
        }, _callee7, this, [[3, 8], [11, 16]]);
      }));

      return function ensureDeps() {
        return _ensureDeps.apply(this, arguments);
      };
    }()
    /**
     * Warns if plugins version are outdated in compare to the newest scaffold.
     * @param {Object} pluginsVersions - current plugins versions from settings.json
     */

  }, {
    key: "checkPluginsVersion",
    value: function checkPluginsVersion(pluginsVersions) {
      var _this7 = this;

      var settingsJson = JSON.parse(_fs.default.readFileSync(_path.default.join(this.$.env.paths.scaffold, 'settings.json')));
      var scaffoldPluginsVersion = this.$.desktop.getDependencies(settingsJson, false).plugins;
      Object.keys(pluginsVersions).forEach(function (pluginName) {
        if (pluginName in scaffoldPluginsVersion && scaffoldPluginsVersion[pluginName] !== pluginsVersions[pluginName] && _semver.default.lt(pluginsVersions[pluginName], scaffoldPluginsVersion[pluginName])) {
          _this7.log.warn(`you are using outdated version ${pluginsVersions[pluginName]} of ` + `${pluginName}, the suggested version to use is ` + `${scaffoldPluginsVersion[pluginName]}`);
        }
      });
    }
    /**
     * Merges core dependency list with the dependencies from .desktop.
     */

  }, {
    key: "updateDependenciesList",
    value: function updateDependenciesList() {
      var _this8 = this;

      this.log.info('updating list of package.json\'s dependencies');
      var desktopDependencies = this.$.desktop.getDependencies();
      this.checkPluginsVersion(desktopDependencies.plugins);
      this.log.debug('merging settings.json[dependencies]');
      this.depsManager.mergeDependencies('settings.json[dependencies]', desktopDependencies.fromSettings);
      this.log.debug('merging settings.json[plugins]');
      this.depsManager.mergeDependencies('settings.json[plugins]', desktopDependencies.plugins);
      this.log.debug('merging dependencies from modules');
      Object.keys(desktopDependencies.modules).forEach(function (module) {
        return _this8.depsManager.mergeDependencies(`module[${module}]`, desktopDependencies.modules[module]);
      });
      this.packageJson.dependencies = this.depsManager.getRemoteDependencies();
      this.packageJson.localDependencies = this.depsManager.getLocalDependencies();
      this.log.debug('writing updated package.json');

      _fs.default.writeFileSync(this.$.env.paths.electronApp.packageJson, JSON.stringify(this.packageJson, null, 2));
    }
    /**
     * Install node modules from local paths using local-install.
     *
     * @param {string} arch
     * @returns {Promise}
     */

  }, {
    key: "installLocalNodeModules",
    value: function installLocalNodeModules() {
      var arch = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.$.env.options.ia32 || process.arch === 'ia32' ? 'ia32' : 'x64';

      var localDependencies = _lodash.default.values(this.packageJson.localDependencies);

      if (localDependencies.length === 0) {
        return Promise.resolve();
      }

      this.log.info('installing local node modules');
      var lastRebuild = this.$.electronBuilder.prepareLastRebuildObject(arch);
      var env = (0, _yarn.getGypEnv)(lastRebuild.frameworkInfo, lastRebuild.platform, lastRebuild.arch);
      var installer = new _installLocal.LocalInstaller({
        [this.$.env.paths.electronApp.root]: localDependencies
      }, {
        npmEnv: env
      });
      (0, _installLocal.progress)(installer);
      return installer.install();
    }
    /**
     * Rebuild binary dependencies against Electron's node headers.
     * @returns {Promise}
     */

  }, {
    key: "rebuildDeps",
    value: function rebuildDeps() {
      var install = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

      if (install) {
        this.log.info('issuing node_modules install from electron-builder');
      } else {
        this.log.info('issuing native modules rebuild from electron-builder');
      }

      var arch = this.$.env.options.ia32 || process.arch === 'ia32' ? 'ia32' : 'x64';

      if (this.$.env.options.ia32) {
        this.log.verbose('forcing rebuild for 32bit');
      } else {
        this.log.verbose(`rebuilding for ${arch}`);
      }

      return this.$.electronBuilder.installOrRebuild(arch, undefined, install);
    }
    /**
     * Update package.json fields accordingly to what is set in settings.json.
     *
     * packageJson.name = settings.projectName
     * packageJson.version = settings.version
     * packageJson.* = settings.packageJsonFields
     */

  }, {
    key: "updatePackageJsonFields",
    value: function updatePackageJsonFields() {
      this.log.verbose('updating package.json fields');
      var settings = this.$.desktop.getSettings();
      /** @type {desktopSettings} */

      var packageJson = this.scaffold.getDefaultPackageJson();
      packageJson.version = settings.version;

      if ('packageJsonFields' in settings) {
        (0, _assignIn.default)(packageJson, settings.packageJsonFields);
      }

      (0, _assignIn.default)(packageJson, {
        name: settings.projectName
      });
      this.log.debug('writing updated package.json');

      _fs.default.writeFileSync(this.$.env.paths.electronApp.packageJson, JSON.stringify(packageJson, null, 4));

      this.packageJson = packageJson;
    }
    /**
     * Updates settings.json with env (prod/dev) information and versions.
     */

  }, {
    key: "updateSettingsJsonFields",
    value: function updateSettingsJsonFields() {
      this.log.debug('updating settings.json fields');
      var settings = this.$.desktop.getSettings(); // Save versions.

      settings.compatibilityVersion = this.compatibilityVersion; // Pass information about build type to the settings.json.

      settings.env = this.$.env.isProductionBuild() ? 'prod' : 'dev';
      settings.desktopVersion = `${this.$.desktop.getHashVersion()}_${settings.env}`;
      settings.meteorDesktopVersion = this.$.getVersion();

      _fs.default.writeFileSync(this.$.env.paths.desktopTmp.settings, JSON.stringify(settings, null, 4));
    }
    /**
     * Copies files from prepared .desktop to desktop.asar in electron app.
     */

  }, {
    key: "packDesktopToAsar",
    value: function packDesktopToAsar() {
      var _this9 = this;

      this.log.info('packing .desktop to asar');
      return new Promise(function (resolve, reject) {
        _asar.default.createPackage(_this9.$.env.paths.desktopTmp.root, _this9.$.env.paths.electronApp.desktopAsar, function () {
          _this9.log.verbose('clearing temporary .desktop');

          _this9.$.utils.rmWithRetries('-rf', _this9.$.env.paths.desktopTmp.root).then(function () {
            resolve();
          }).catch(function (e) {
            reject(e);
          });

          resolve();
        });
      });
    }
    /**
     * Makes a temporary copy of .desktop.
     */

  }, {
    key: "copyDesktopToDesktopTemp",
    value: function copyDesktopToDesktopTemp() {
      this.log.verbose('copying .desktop to temporary location');

      _shelljs.default.cp('-rf', this.$.env.paths.desktop.root, this.$.env.paths.desktopTmp.root); // Remove test files.


      _del.default.sync([_path.default.join(this.$.env.paths.desktopTmp.root, '**', '*.test.js')]);
    }
    /**
     * Runs babel and uglify over .desktop if requested.
     */

  }, {
    key: "transpileAndMinify",
    value: function transpileAndMinify() {
      this.log.info('transpiling and uglifying');
      var settings = this.$.desktop.getSettings();
      var options = 'uglifyOptions' in settings ? settings.uglifyOptions : {};
      var uglifyingEnabled = 'uglify' in settings && !!settings.uglify;
      var preset = (0, _presetEnv.default)(undefined, {
        targets: {
          node: '8'
        }
      });

      _glob.default.sync(`${this.$.env.paths.desktopTmp.root}/**/*.js`).forEach(function (file) {
        var _transformFileSync = (0, _core.transformFileSync)(file, {
          presets: [preset]
        }),
            code = _transformFileSync.code;

        var error;

        if (settings.env === 'prod' && uglifyingEnabled) {
          var _uglify$minify = _uglifyEs.default.minify(code, options);

          code = _uglify$minify.code;
          error = _uglify$minify.error;
        }

        if (error) {
          throw new Error(error);
        }

        _fs.default.writeFileSync(file, code);
      });
    }
    /**
     * Moves all the files that should not be packed into asar into a safe location which is the
     * 'extracted' dir in the electron app.
     */

  }, {
    key: "excludeFilesFromArchive",
    value: function () {
      var _excludeFilesFromArchive = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee8() {
        var _this10 = this;

        var configs;
        return regeneratorRuntime.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                this.log.info('excluding files from packing'); // Ensure empty `extracted` dir

                _context8.prev = 1;
                _context8.next = 4;
                return this.$.utils.rmWithRetries('-rf', this.$.env.paths.electronApp.extracted);

              case 4:
                _context8.next = 9;
                break;

              case 6:
                _context8.prev = 6;
                _context8.t0 = _context8["catch"](1);
                throw new Error(_context8.t0);

              case 9:
                _shelljs.default.mkdir(this.$.env.paths.electronApp.extracted);

                configs = this.$.desktop.gatherModuleConfigs(); // Move files that should not be asar'ed.

                configs.forEach(function (config) {
                  var moduleConfig = config;

                  if ('extract' in moduleConfig) {
                    if (!Array.isArray(moduleConfig.extract)) {
                      moduleConfig.extract = [moduleConfig.extract];
                    }

                    moduleConfig.extract.forEach(function (file) {
                      _this10.log.debug(`excluding ${file} from ${config.name}`);

                      var filePath = _path.default.join(_this10.$.env.paths.desktopTmp.modules, moduleConfig.dirName, file);

                      var destinationPath = _path.default.join(_this10.$.env.paths.electronApp.extracted, moduleConfig.dirName);

                      if (!_this10.$.utils.exists(destinationPath)) {
                        _shelljs.default.mkdir(destinationPath);
                      }

                      _shelljs.default.mv(filePath, destinationPath);
                    });
                  }
                });

              case 12:
              case "end":
                return _context8.stop();
            }
          }
        }, _callee8, this, [[1, 6]]);
      }));

      return function excludeFilesFromArchive() {
        return _excludeFilesFromArchive.apply(this, arguments);
      };
    }()
  }]);

  return ElectronApp;
}();

exports.default = ElectronApp;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,