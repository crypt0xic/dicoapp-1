'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

exports.exists = exists;
exports.rmWithRetries = rmWithRetries;
exports.readDir = readDir;
exports.getFileList = getFileList;
exports.readAndGetFileHash = readAndGetFileHash;
exports.computeHashForHashesSet = computeHashForHashesSet;
exports.readAndHashFiles = readAndHashFiles;
exports.readFilesAndComputeHash = readFilesAndComputeHash;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _crypto = require('crypto');

var _crypto2 = _interopRequireDefault(_crypto);

var _shelljs = require('shelljs');

var _shelljs2 = _interopRequireDefault(_shelljs);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Exists
 * @param {string} pathToCheck
 * @returns {boolean}
 */
/* eslint-disable consistent-return */
function exists(pathToCheck) {
    try {
        _fs2.default.accessSync(pathToCheck);
        return true;
    } catch (e) {
        return false;
    }
}

/**
 * Simple wrapper for shelljs.rm with additional retries in case of failure.
 * It is useful when something is concurrently reading the dir you want to remove.
 */
function rmWithRetries() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
    }

    var retries = 0;
    return new _promise2.default(function (resolve, reject) {
        function rm() {
            for (var _len2 = arguments.length, rmArgs = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
                rmArgs[_key2] = arguments[_key2];
            }

            try {
                _shelljs2.default.config.fatal = true;
                _shelljs2.default.rm.apply(_shelljs2.default, rmArgs);
                _shelljs2.default.config.reset();
                resolve();
            } catch (e) {
                retries += 1;
                if (retries < 5) {
                    setTimeout(function () {
                        rm.apply(undefined, rmArgs);
                    }, 100);
                } else {
                    _shelljs2.default.config.reset();
                    reject(e);
                }
            }
        }
        rm.apply(undefined, args);
    });
}

function readDir(dir, callback) {
    if (!callback) {
        return new _promise2.default(function (resolve, reject) {
            readDir(dir, function (err, data, stats) {
                if (err) {
                    reject(err);
                } else {
                    resolve({ data: data, stats: stats });
                }
            });
        });
    }
    var list = [];
    var allStats = {};

    _fs2.default.readdir(dir, function (err, files) {
        if (err) {
            return callback(err);
        }
        var pending = files.length;
        if (!pending) {
            return callback(null, list, allStats);
        }
        files.forEach(function (file) {
            var filePath = _path2.default.join(dir, file);
            _fs2.default.stat(filePath, function (_err, stats) {
                if (_err) {
                    return callback(_err);
                }
                if (stats.isDirectory()) {
                    readDir(filePath, function (__err, res, _allStats) {
                        if (__err) {
                            return callback(__err);
                        }
                        list = list.concat(res);
                        allStats = (0, _assign2.default)(allStats, _allStats);
                        pending -= 1;
                        if (!pending) {
                            return callback(null, list, allStats);
                        }
                    });
                } else {
                    list.push(filePath);
                    allStats[filePath] = {
                        size: stats.size,
                        dates: [stats.atime.getTime(), stats.birthtime.getTime(), stats.ctime.getTime(), stats.mtime.getTime()]
                    };
                    pending -= 1;
                    if (!pending) {
                        return callback(null, list, allStats);
                    }
                }
            });
        });
    });
}

/**
 * Returns a file list from a directory.
 * @param {string} dir - dir path
 * @param {boolean} sort - whether to apply sort
 * @returns {Promise<Array>}
 */
function getFileList(dir) {
    var sort = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    return new _promise2.default(function (resolve, reject) {
        readDir(dir, function (error, files) {
            if (error) {
                reject(error);
                return;
            }
            // eslint-disable-next-line no-param-reassign
            if (sort) {
                files = files.sort();
            }
            resolve(files);
        });
    });
}

/**
 * Returns file's hash.
 * @param {string} file - file path
 * @param {boolean} returnFileContents - include file contents in the resultant object
 * @returns {Promise<Object>}
 */
function readAndGetFileHash(file) {
    var returnFileContents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

    return new _promise2.default(function (resolve, reject) {
        _fs2.default.readFile(file, function (err, data) {
            if (err) {
                reject(err);
                return;
            }
            var hash = _crypto2.default.createHash('sha1');
            hash.update(data);
            var returnObject = { hash: hash.digest('hex') };
            if (returnFileContents) {
                returnObject.contents = data.toString('utf8');
            }
            resolve(returnObject);
        });
    });
}

/**
 * Calculates a hash from objects values in specified order.
 * @param {Array} orderOfKeys
 * @param {Object} hashSet
 * @param {Function} keyFilter
 * @returns {string}
 */
function computeHashForHashesSet(orderOfKeys, hashSet) {
    var keyFilter = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : function (key) {
        return key;
    };

    var hash = _crypto2.default.createHash('sha1');
    var hashesJoined = orderOfKeys.reduce(
    // eslint-disable-next-line no-param-reassign
    function (tmpHash, key) {
        return tmpHash += hashSet[keyFilter(key)], tmpHash;
    }, '');
    hash.update(hashesJoined);
    return hash.digest('hex');
}

/**
 * Reads files from disk and computes hashes for them.
 * @param {Array} files - array with file paths
 * @returns {Promise<Object>}
 */
function readAndHashFiles(files, fileFilter) {
    var fileHashes = {};
    var fileContents = {};
    var promises = [];

    function readSingleFile(file) {
        return new _promise2.default(function (resolve, reject) {
            readAndGetFileHash(file, file.endsWith('.js') && !file.endsWith('.test.js')).then(function (result) {
                if (fileFilter) {
                    file = fileFilter(file);
                }
                fileHashes[file] = result.hash;
                if (result.contents) {
                    fileContents[file] = result.contents;
                }
                resolve();
            }).catch(reject);
        });
    }

    files.forEach(function (file) {
        promises.push(readSingleFile(file));
    });

    return new _promise2.default(function (resolve, reject) {
        _promise2.default.all(promises).then(function () {
            resolve({ files: files, fileContents: fileContents, fileHashes: fileHashes });
        }).catch(reject);
    });
}

/**
 * Reads files from .desktop and computes a version hash.
 *
 * @param {string} dir - path
 * @param {Function} fileFilter
 * @returns {Promise<Object>}
 */
function readFilesAndComputeHash(dir, fileFilter) {
    return new _promise2.default(function (resolve, reject) {
        getFileList(dir, true).catch(reject).then(function (files) {
            return readAndHashFiles(files, fileFilter);
        }).catch(reject).then(function (result) {
            result.hash = computeHashForHashesSet(result.files, result.fileHashes, fileFilter);
            resolve(result);
        });
    });
}

exports.default = {
    getFileList: getFileList, rmWithRetries: rmWithRetries, exists: exists, readDir: readDir, readAndGetFileHash: readAndGetFileHash, computeHashForHashesSet: computeHashForHashesSet,
    readAndHashFiles: readAndHashFiles, readFilesAndComputeHash: readFilesAndComputeHash
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,