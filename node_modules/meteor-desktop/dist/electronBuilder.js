"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _electronBuilder = require("electron-builder");

var _yarn = require("electron-builder-lib/out/util/yarn");

var _packageDependencies = require("electron-builder-lib/out/util/packageDependencies");

var _shelljs = _interopRequireDefault(require("shelljs"));

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _rimraf = _interopRequireDefault(require("rimraf"));

var _crossSpawn = _interopRequireDefault(require("cross-spawn"));

var _log = _interopRequireDefault(require("./log"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } } function _next(value) { step("next", value); } function _throw(err) { step("throw", err); } _next(); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/**
 * Promisfied rimraf.
 *
 * @param {string} dirPath - path to the dir to be deleted
 * @param {number} delay - delay the task by ms
 * @returns {Promise<any>}
 */
function removeDir(dirPath) {
  var delay = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  return new Promise(function (resolve, reject) {
    setTimeout(function () {
      (0, _rimraf.default)(dirPath, {
        maxBusyTries: 100
      }, function (err) {
        if (err) {
          reject(err);
        } else {
          resolve();
        }
      });
    }, delay);
  });
}
/**
 * Wrapper for electron-builder.
 */


var InstallerBuilder =
/*#__PURE__*/
function () {
  /**
   * @param {MeteorDesktop} $ - context
   *
   * @constructor
   */
  function InstallerBuilder($) {
    _classCallCheck(this, InstallerBuilder);

    this.log = new _log.default('electronBuilder');
    this.$ = $;
    this.firstPass = true;
    this.lastRebuild = {};
    this.currentContext = null;
    this.installerDir = _path.default.join(this.$.env.options.output, this.$.env.paths.installerDir);
  }
  /**
   * Prepares the last rebuild object for electron-builder.
   *
   * @param {string} arch
   * @param {string} platform
   * @returns {Object}
   */


  _createClass(InstallerBuilder, [{
    key: "prepareLastRebuildObject",
    value: function prepareLastRebuildObject(arch) {
      var platform = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : process.platform;
      var productionDeps = (0, _packageDependencies.createLazyProductionDeps)(this.$.env.paths.electronApp.root);
      this.lastRebuild = {
        frameworkInfo: {
          version: this.$.getElectronVersion(),
          useCustomDist: true
        },
        platform,
        arch,
        productionDeps
      };
      return this.lastRebuild;
    }
    /**
     * Calls npm rebuild from electron-builder.
     * @param {string} arch
     * @param {string} platform
     * @param {boolean} install
     * @returns {Promise}
     */

  }, {
    key: "installOrRebuild",
    value: function () {
      var _installOrRebuild2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee(arch) {
        var platform,
            install,
            _args = arguments;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                platform = _args.length > 1 && _args[1] !== undefined ? _args[1] : process.platform;
                install = _args.length > 2 && _args[2] !== undefined ? _args[2] : false;
                this.log.debug(`calling installOrRebuild from electron-builder for arch ${arch}`);
                this.prepareLastRebuildObject(arch, platform);
                _context.next = 6;
                return (0, _yarn.installOrRebuild)(this.$.desktop.getSettings().builderOptions || {}, this.$.env.paths.electronApp.root, this.lastRebuild, install);

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      return function installOrRebuild(_x) {
        return _installOrRebuild2.apply(this, arguments);
      };
    }()
    /**
     * Callback invoked before build is made. Ensures that app.asar have the right rebuilt
     * node_modules.
     *
     * @param {Object} context
     * @returns {Promise}
     */

  }, {
    key: "beforeBuild",
    value: function beforeBuild(context) {
      var _this = this;

      this.currentContext = Object.assign({}, context);
      return new Promise(function (resolve, reject) {
        var platformMatches = process.platform === context.platform.nodeName;
        var rebuild = platformMatches && context.arch !== _this.lastRebuild.arch;

        if (!platformMatches) {
          _this.log.warn('skipping dependencies rebuild because platform is different, if you have native ' + 'node modules as your app dependencies you should od the build on the target platform only');
        }

        if (!rebuild) {
          _this.moveNodeModulesOut().catch(function (e) {
            return reject(e);
          }).then(function () {
            return setTimeout(function () {
              return resolve(false);
            }, 2000);
          }); // Timeout helps on Windows to clear the file locks.

        } else {
          // Lets rebuild the node_modules for different arch.
          _this.installOrRebuild(context.arch, context.platform.nodeName).catch(function (e) {
            return reject(e);
          }).then(function () {
            return _this.$.electronApp.installLocalNodeModules(context.arch);
          }).catch(function (e) {
            return reject(e);
          }).then(function () {
            _this.$.electronApp.scaffold.createAppRoot();

            _this.$.electronApp.scaffold.copySkeletonApp();

            return _this.$.electronApp.packSkeletonToAsar([_this.$.env.paths.electronApp.meteorAsar, _this.$.env.paths.electronApp.desktopAsar, _this.$.env.paths.electronApp.extracted]);
          }).catch(function (e) {
            return reject(e);
          }).then(function () {
            return _this.moveNodeModulesOut();
          }).catch(function (e) {
            return reject(e);
          }).then(function () {
            return resolve(false);
          });
        }
      });
    }
    /**
     * Callback to be invoked after packing. Restores node_modules to the .desktop-build.
     * @returns {Promise}
     */

  }, {
    key: "afterPack",
    value: function afterPack(context) {
      var _this2 = this;

      return new Promise(function (resolve, reject) {
        _shelljs.default.config.fatal = true;

        if (_this2.$.utils.exists(_this2.$.env.paths.electronApp.extractedNodeModules)) {
          _this2.log.debug('injecting extracted modules');

          _shelljs.default.cp('-Rf', _this2.$.env.paths.electronApp.extractedNodeModules, _path.default.join(_this2.getPackagedAppPath(context), 'node_modules'));
        }

        _this2.log.debug('moving node_modules back'); // Move node_modules back.


        try {
          _shelljs.default.mv(_this2.$.env.paths.electronApp.tmpNodeModules, _this2.$.env.paths.electronApp.nodeModules);
        } catch (e) {
          reject(e);
          return;
        } finally {
          _shelljs.default.config.reset();
        }

        if (_this2.firstPass) {
          _this2.firstPass = false;
        }

        _this2.log.debug('node_modules moved back');

        _this2.wait().catch(function (e) {
          return reject(e);
        }).then(function () {
          return resolve();
        });
      });
    }
    /**
     * This command kills orphaned MSBuild.exe processes.
     * Sometime after native node_modules compilation they are still writing some logs,
     * prevent node_modules from being deleted.
     */

  }, {
    key: "killMSBuild",
    value: function killMSBuild() {
      var _this3 = this;

      if (this.currentContext.platform.nodeName !== 'win32') {
        return;
      }

      try {
        var out = _crossSpawn.default.sync('wmic', ['process', 'where', 'caption="MSBuild.exe"', 'get', 'processid']).stdout.toString('utf-8').split('\n');

        var regex = new RegExp(/(\d+)/, 'gm'); // No we will check for those with the matching params.

        out.forEach(function (line) {
          var match = regex.exec(line) || false;

          if (match) {
            _this3.log.debug(`killing MSBuild.exe at pid: ${match[1]}`);

            _crossSpawn.default.sync('taskkill', ['/pid', match[1], '/f', '/t']);
          }

          regex.lastIndex = 0;
        });
      } catch (e) {
        this.log.debug('kill MSBuild failed');
      }
    }
    /**
     * Returns the path to packaged app.
     * @returns {string}
     */

  }, {
    key: "getPackagedAppPath",
    value: function getPackagedAppPath() {
      var context = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      if (this.currentContext.platform.nodeName === 'darwin') {
        return _path.default.join(this.installerDir, `${context.packager.appInfo.productFilename}.app`, 'Contents', 'Resources', 'app');
      }

      var platformDir = `${this.currentContext.platform.nodeName === 'win32' ? 'win' : 'linux'}-${this.currentContext.arch === 'ia32' ? 'ia32-' : ''}unpacked`;
      return _path.default.join(this.installerDir, platformDir, 'resources', 'app');
    }
    /**
     * On Windows it waits for the app.asar in the packed app to be free (no file locks).
     * @returns {*}
     */

  }, {
    key: "wait",
    value: function wait() {
      if (this.currentContext.platform.nodeName !== 'win32') {
        return Promise.resolve();
      }

      var appAsarPath = _path.default.join(this.getPackagedAppPath(), 'app.asar');

      var retries = 0;
      var self = this;
      return new Promise(function (resolve, reject) {
        function check() {
          _fs.default.open(appAsarPath, 'r+', function (err, fd) {
            retries += 1;

            if (err) {
              if (err.code !== 'ENOENT') {
                self.log.debug(`waiting for app.asar to be readable, ${'code' in err ? `currently reading it returns ${err.code}` : ''}`);

                if (retries < 6) {
                  setTimeout(function () {
                    return check();
                  }, 4000);
                } else {
                  reject(`file is locked: ${appAsarPath}`);
                }
              } else {
                resolve();
              }
            } else {
              _fs.default.closeSync(fd);

              resolve();
            }
          });
        }

        check();
      });
    }
    /**
     * Prepares the target object passed to the electron-builder.
     *
     * @returns {Map<Platform, Map<Arch, Array<string>>>}
     */

  }, {
    key: "prepareTargets",
    value: function prepareTargets() {
      var arch = this.$.env.options.ia32 ? 'ia32' : 'x64';
      arch = this.$.env.options.allArchs ? 'all' : arch;
      var targets = [];

      if (this.$.env.options.win) {
        targets.push(_electronBuilder.Platform.WINDOWS);
      }

      if (this.$.env.options.linux) {
        targets.push(_electronBuilder.Platform.LINUX);
      }

      if (this.$.env.options.mac) {
        targets.push(_electronBuilder.Platform.MAC);
      }

      if (targets.length === 0) {
        if (this.$.env.os.isWindows) {
          targets.push(_electronBuilder.Platform.WINDOWS);
        } else if (this.$.env.os.isLinux) {
          targets.push(_electronBuilder.Platform.LINUX);
        } else {
          targets.push(_electronBuilder.Platform.MAC);
        }
      }

      return (0, _electronBuilder.createTargets)(targets, null, arch);
    }
  }, {
    key: "build",
    value: function () {
      var _build2 = _asyncToGenerator(
      /*#__PURE__*/
      regeneratorRuntime.mark(function _callee2() {
        var settings, builderOptions;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                settings = this.$.desktop.getSettings();

                if (!('builderOptions' in settings)) {
                  this.log.error('no builderOptions in settings.json, aborting');
                  process.exit(1);
                }

                builderOptions = Object.assign({}, settings.builderOptions);
                builderOptions.asar = false;
                builderOptions.npmRebuild = true;
                builderOptions.beforeBuild = this.beforeBuild.bind(this);
                builderOptions.afterPack = this.afterPack.bind(this);
                builderOptions.electronVersion = this.$.getElectronVersion();
                builderOptions.directories = {
                  app: this.$.env.paths.electronApp.root,
                  output: _path.default.join(this.$.env.options.output, this.$.env.paths.installerDir)
                };
                _context2.prev = 9;
                this.log.debug('calling build from electron-builder');
                _context2.next = 13;
                return (0, _electronBuilder.build)(Object.assign({
                  targets: this.prepareTargets(),
                  config: builderOptions
                }, settings.builderCliOptions));

              case 13:
                if (this.$.utils.exists(this.$.env.paths.electronApp.extractedNodeModules)) {
                  _shelljs.default.rm('-rf', this.$.env.paths.electronApp.extractedNodeModules);
                }

                _context2.next = 19;
                break;

              case 16:
                _context2.prev = 16;
                _context2.t0 = _context2["catch"](9);
                this.log.error('error while building installer: ', _context2.t0);

              case 19:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this, [[9, 16]]);
      }));

      return function build() {
        return _build2.apply(this, arguments);
      };
    }()
    /**
     * Moves node_modules out of the app because while the app will be packaged
     * we do not want it to be there.
     * @returns {Promise<any>}
     */

  }, {
    key: "moveNodeModulesOut",
    value: function moveNodeModulesOut() {
      var _this4 = this;

      return new Promise(function (resolve, reject) {
        _this4.log.debug('moving node_modules out, because we have them already in' + ' app.asar');

        _this4.killMSBuild();

        removeDir(_this4.$.env.paths.electronApp.tmpNodeModules).catch(function (e) {
          return reject(e);
        }).then(function () {
          _shelljs.default.config.fatal = true;
          _shelljs.default.config.verbose = true;

          try {
            _shelljs.default.mv(_this4.$.env.paths.electronApp.nodeModules, _this4.$.env.paths.electronApp.tmpNodeModules);

            _shelljs.default.config.reset();

            return _this4.wait();
          } catch (e) {
            _shelljs.default.config.reset();

            return Promise.reject(e);
          }
        }).catch(function (e) {
          return reject(e);
        }).then(function () {
          return removeDir(_this4.$.env.paths.electronApp.nodeModules, 1000);
        }).catch(function (e) {
          return reject(e);
        }).then(function () {
          return _this4.wait();
        }).catch(reject).then(resolve);
      });
    }
  }]);

  return InstallerBuilder;
}();

exports.default = InstallerBuilder;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,