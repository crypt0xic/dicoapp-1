#!/usr/bin/env node
"use strict";

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _assignIn = _interopRequireDefault(require("lodash/assignIn"));

var _commander = _interopRequireDefault(require("commander"));

var _shelljs = _interopRequireDefault(require("shelljs"));

var _ = _interopRequireDefault(require("../.."));

var _addScript = _interopRequireDefault(require("../scripts/utils/addScript"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/* eslint-disable global-require */
process.env.MD_LOG_LEVEL = 'ALL';
var join = _path.default.join;
var cmd = process.argv[2];
/* eslint-disable no-console */

var _console = console,
    log = _console.log,
    error = _console.error,
    info = _console.info,
    warn = _console.warn;
/* eslint-enable no-console */

/**
 * Looks for .meteor directory.
 * @param {string} appPath - Meteor app path
 */

function isMeteorApp(appPath) {
  var meteorPath = join(appPath, '.meteor');

  try {
    return _fs.default.statSync(meteorPath).isDirectory();
  } catch (e) {
    return false;
  }
}
/**
 * Just ensures a ddp url is set.
 *
 * @param {string|null} ddpUrl - the url that Meteor app connects to
 * @returns {string|null}
 */


function getDdpUrl() {
  var ddpUrl = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;

  if (!ddpUrl && _commander.default.buildMeteor) {
    info('no ddp_url specified, setting default: http://127.0.0.1:3000');
    return 'http://127.0.0.1:3000';
  }

  return ddpUrl;
} // --------------------------


_commander.default.option('-b, --build-meteor', 'runs meteor to obtain the mobile build, kills it after').option('-t, --build-timeout <timeout_in_sec>', 'timeout value when waiting for ' + 'meteor to build, default 600sec').option('-p, --port <port>', 'port on which meteor is running, when with -b this will be passed to meteor when obtaining the build').option('--production', 'builds meteor app with the production switch, uglifies contents ' + 'of .desktop, packs app to app.asar').option('-a, --android', 'force adding android as a mobile platform instead of ios').option('-s, --scaffold', 'will scaffold .desktop if not present').option('--meteor-settings <path>', 'only with -b, adds --settings options to meteor').option('--ia32', 'generate 32bit installer/package').option('--all-archs', 'generate 32bit and 64bit installers').option('--win', 'generate Windows installer').option('--linux', 'generate Linux installer').option('--mac', 'generate Mac installer');

_commander.default.usage('[command] [options]').version(require('./../../package.json').version, '-V, --version').on('--help', function () {
  log('  [ddp_url] - pass a ddp url if you want to use different one than used in meteor\'s --mobile-server');
  log('              this will also work with -b');
  log('    ');
  log('  Examples:');
  log('');
  log('   ', ['# cd into meteor dir first', 'cd /your/meteor/app', 'meteor --mobile-server=127.0.0.1:3000', '', '# open new terminal, assuming you have done npm install --save-dev meteor-desktop', 'npm run desktop -- init', 'npm run desktop'].join('\n    '));
  log('\n');
});

function verifyArgsSyntax() {
  if (process.env.npm_config_argv) {
    var npmArgv;

    try {
      var args = ['-b', '--build-meteor', '-t', '--build-timeout', '-p', '--port', '--production', '-a', '--android', '-s', '--scaffold', '--ia32', '--win', '--linux', '--all-archs', '--win', '--mac', '--meteor-settings'];
      npmArgv = JSON.parse(process.env.npm_config_argv);

      if (npmArgv.remain.length === 0 && npmArgv.original.length > 2) {
        if (npmArgv.original.some(function (arg) {
          return !!~args.indexOf(arg);
        })) {
          warn('WARNING: seems that you might used the wrong console syntax, no ` --' + ' ` delimiter was found, be sure you are invoking meteor-desktop with' + ' it when passing commands or options -> ' + '`npm run desktop -- command --option`\n');
        }
      }
    } catch (e) {// Not sure if `npm_config_argv` is always present...
    }
  }
}

function meteorDesktopFactory(ddpUrl) {
  var production = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  info(`METEOR-DESKTOP v${require('./../../package.json').version}\n`);
  verifyArgsSyntax();
  var input = process.cwd();

  if (!isMeteorApp(input)) {
    error(`not in a meteor app dir\n ${input}`);
    process.exit();
  }

  if (!_commander.default.output) {
    _commander.default.output = input;
  }

  if (production && !_commander.default.production) {
    info('package/build-installer implies setting --production, setting it for you');
  }

  if (!_commander.default.buildMeteor) {
    _commander.default.port = _commander.default.port || 3000;
    info(`REMINDER: your Meteor project should be running now on port ${_commander.default.port}\n`);
  }

  var options = {
    ddpUrl,
    skipMobileBuild: _commander.default.buildMeteor ? !_commander.default.buildMeteor : true,
    production: _commander.default.production || production
  };
  (0, _assignIn.default)(options, _commander.default);
  return (0, _.default)(input, _commander.default.output, options);
}

function run(ddpUrl) {
  meteorDesktopFactory(getDdpUrl(ddpUrl)).run();
}

function build(ddpUrl) {
  meteorDesktopFactory(getDdpUrl(ddpUrl)).build();
}

function init() {
  meteorDesktopFactory().init();
}

function justRun() {
  meteorDesktopFactory().justRun();
}

function runPackager(ddpUrl) {
  meteorDesktopFactory(getDdpUrl(ddpUrl), true).runPackager();
}

function buildInstaller(ddpUrl) {
  meteorDesktopFactory(getDdpUrl(ddpUrl), true).buildInstaller();
}

function initTestsSupport() {
  log('installing cross-env, ava, meteor-desktop-test-suite and spectron');
  log('running `meteor npm install --save-dev cross-env ava spectron meteor-desktop-test-suite`');

  var _shell$exec = _shelljs.default.exec('meteor npm install --save-dev cross-env ava spectron meteor-desktop-test-suite'),
      code = _shell$exec.code;

  if (code !== 0) {
    warn('could not add cross-env, ava and spectron to your `devDependencies`, please do it' + ' manually');
  }

  var test = 'cross-env NODE_ENV=test ava .desktop/**/*.test.js -s --verbose';
  var testWatch = 'cross-env NODE_ENV=test ava .desktop/**/*.test.js -s --verbose' + ' --watch --source .desktop';

  function fail() {
    error('\ncould not add entries to `scripts` in package.json');
    log('please try to add it manually\n');
    log(`test-desktop: ${test}`);
    log(`test-desktop-watch: ${testWatch}`);
  }

  var packageJsonPath = _path.default.resolve(_path.default.join(process.cwd(), 'package.json'));

  (0, _addScript.default)('test-desktop', test, packageJsonPath, fail);
  (0, _addScript.default)('test-desktop-watch', testWatch, packageJsonPath, fail);
  log('\nadded test-desktop and test-desktop-watch entries');
  log('run the test with `npm run test-desktop`');
}

_commander.default.command('init').description('scaffolds .desktop dir in the meteor app').action(init);

_commander.default.command('run [ddp_url]').description('(default) builds and runs desktop app').action(run);

_commander.default.command('build [ddp_url]').description('builds your desktop app').action(build);

_commander.default.command('build-installer [ddp_url]').description('creates the installer').action(buildInstaller);

_commander.default.command('just-run').description('alias for running `electron .` in `.meteor/desktop-build`').action(justRun);

_commander.default.command('package [ddp_url]').description('runs electron packager').action(runPackager);

_commander.default.command('init-tests-support').description('prepares project for running functional tests of desktop app').action(initTestsSupport);

if (process.argv.length === 2 || !~'-h|--help|run|init|build|build-installer|just-run|init-tests-support|package'.indexOf(cmd)) {
  var _process = process,
      argv = _process.argv;

  if (process.argv.length === 2) {
    argv.push('run');
  } else {
    var command = argv.splice(0, 2);
    command = command.concat('run', argv);
    argv = command;
  }

  _commander.default.parse(argv);
} else {
  _commander.default.parse(process.argv);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9iaW4vY2xpLmpzIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJlbnYiLCJNRF9MT0dfTEVWRUwiLCJqb2luIiwiY21kIiwiYXJndiIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciIsImluZm8iLCJ3YXJuIiwiaXNNZXRlb3JBcHAiLCJhcHBQYXRoIiwibWV0ZW9yUGF0aCIsInN0YXRTeW5jIiwiaXNEaXJlY3RvcnkiLCJlIiwiZ2V0RGRwVXJsIiwiZGRwVXJsIiwiYnVpbGRNZXRlb3IiLCJvcHRpb24iLCJ1c2FnZSIsInZlcnNpb24iLCJyZXF1aXJlIiwib24iLCJ2ZXJpZnlBcmdzU3ludGF4IiwibnBtX2NvbmZpZ19hcmd2IiwibnBtQXJndiIsImFyZ3MiLCJKU09OIiwicGFyc2UiLCJyZW1haW4iLCJsZW5ndGgiLCJvcmlnaW5hbCIsInNvbWUiLCJpbmRleE9mIiwiYXJnIiwibWV0ZW9yRGVza3RvcEZhY3RvcnkiLCJwcm9kdWN0aW9uIiwiaW5wdXQiLCJjd2QiLCJleGl0Iiwib3V0cHV0IiwicG9ydCIsIm9wdGlvbnMiLCJza2lwTW9iaWxlQnVpbGQiLCJydW4iLCJidWlsZCIsImluaXQiLCJqdXN0UnVuIiwicnVuUGFja2FnZXIiLCJidWlsZEluc3RhbGxlciIsImluaXRUZXN0c1N1cHBvcnQiLCJleGVjIiwiY29kZSIsInRlc3QiLCJ0ZXN0V2F0Y2giLCJmYWlsIiwicGFja2FnZUpzb25QYXRoIiwicmVzb2x2ZSIsImNvbW1hbmQiLCJkZXNjcmlwdGlvbiIsImFjdGlvbiIsInB1c2giLCJzcGxpY2UiLCJjb25jYXQiXSwibWFwcGluZ3MiOiI7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7QUFSQTtBQVVBQSxRQUFRQyxHQUFSLENBQVlDLFlBQVosR0FBMkIsS0FBM0I7SUFFUUMsSSxpQkFBQUEsSTtBQUNSLElBQU1DLE1BQU1KLFFBQVFLLElBQVIsQ0FBYSxDQUFiLENBQVo7QUFFQTs7ZUFHSUMsTztJQURB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QUwsQ0FBVSxLQUFWO0FBQ0gsR0FGRCxNQUVPO0FBQ0gsUUFBSUgsVUFBVXZELEtBQUsyRCxNQUFMLENBQVksQ0FBWixFQUFlLENBQWYsQ0FBZDtBQUNBSixjQUFVQSxRQUFRSyxNQUFSLENBQWUsS0FBZixFQUFzQjVELElBQXRCLENBQVY7QUFDQUEsV0FBT3VELE9BQVA7QUFDSDs7QUFDRCxxQkFBUTlCLEtBQVIsQ0FBY3pCLElBQWQ7QUFDSCxDQVhELE1BV087QUFDSCxxQkFBUXlCLEtBQVIsQ0FBYzlCLFFBQVFLLElBQXRCO0FBQ0giLCJmaWxlIjoiY2xpLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4vKiBlc2xpbnQtZGlzYWJsZSBnbG9iYWwtcmVxdWlyZSAqL1xuaW1wb3J0IGZzIGZyb20gJ2ZzJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IGFzc2lnbkluIGZyb20gJ2xvZGFzaC9hc3NpZ25Jbic7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHNoZWxsIGZyb20gJ3NoZWxsanMnO1xuXG5pbXBvcnQgbWV0ZW9yRGVza3RvcCBmcm9tICcuLi8uLic7XG5pbXBvcnQgYWRkU2NyaXB0IGZyb20gJy4uL3NjcmlwdHMvdXRpbHMvYWRkU2NyaXB0JztcblxucHJvY2Vzcy5lbnYuTURfTE9HX0xFVkVMID0gJ0FMTCc7XG5cbmNvbnN0IHsgam9pbiB9ID0gcGF0aDtcbmNvbnN0IGNtZCA9IHByb2Nlc3MuYXJndlsyXTtcblxuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuY29uc3Qge1xuICAgIGxvZywgZXJyb3IsIGluZm8sIHdhcm5cbn0gPSBjb25zb2xlO1xuXG4vKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuLyoqXG4gKiBMb29rcyBmb3IgLm1ldGVvciBkaXJlY3RvcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30gYXBwUGF0aCAtIE1ldGVvciBhcHAgcGF0aFxuICovXG5mdW5jdGlvbiBpc01ldGVvckFwcChhcHBQYXRoKSB7XG4gICAgY29uc3QgbWV0ZW9yUGF0aCA9IGpvaW4oYXBwUGF0aCwgJy5tZXRlb3InKTtcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZnMuc3RhdFN5bmMobWV0ZW9yUGF0aCkuaXNEaXJlY3RvcnkoKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG59XG5cbi8qKlxuICogSnVzdCBlbnN1cmVzIGEgZGRwIHVybCBpcyBzZXQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd8bnVsbH0gZGRwVXJsIC0gdGhlIHVybCB0aGF0IE1ldGVvciBhcHAgY29ubmVjdHMgdG9cbiAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH1cbiAqL1xuZnVuY3Rpb24gZ2V0RGRwVXJsKGRkcFVybCA9IG51bGwpIHtcbiAgICBpZiAoIWRkcFVybCAmJiBwcm9ncmFtLmJ1aWxkTWV0ZW9yKSB7XG4gICAgICAgIGluZm8oJ25vIGRkcF91cmwgc3BlY2lmaWVkLCBzZXR0aW5nIGRlZmF1bHQ6IGh0dHA6Ly8xMjcuMC4wLjE6MzAwMCcpO1xuICAgICAgICByZXR1cm4gJ2h0dHA6Ly8xMjcuMC4wLjE6MzAwMCc7XG4gICAgfVxuICAgIHJldHVybiBkZHBVcmw7XG59XG5cbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG5cbnByb2dyYW1cbiAgICAub3B0aW9uKCctYiwgLS1idWlsZC1tZXRlb3InLCAncnVucyBtZXRlb3IgdG8gb2J0YWluIHRoZSBtb2JpbGUgYnVpbGQsIGtpbGxzIGl0IGFmdGVyJylcbiAgICAub3B0aW9uKCctdCwgLS1idWlsZC10aW1lb3V0IDx0aW1lb3V0X2luX3NlYz4nLCAndGltZW91dCB2YWx1ZSB3aGVuIHdhaXRpbmcgZm9yICcgK1xuICAgICAgICAnbWV0ZW9yIHRvIGJ1aWxkLCBkZWZhdWx0IDYwMHNlYycpXG4gICAgLm9wdGlvbignLXAsIC0tcG9ydCA8cG9ydD4nLCAncG9ydCBvbiB3aGljaCBtZXRlb3IgaXMgcnVubmluZywgd2hlbiB3aXRoIC1iIHRoaXMgd2lsbCBiZSBwYXNzZWQgdG8gbWV0ZW9yIHdoZW4gb2J0YWluaW5nIHRoZSBidWlsZCcpXG4gICAgLm9wdGlvbignLS1wcm9kdWN0aW9uJywgJ2J1aWxkcyBtZXRlb3IgYXBwIHdpdGggdGhlIHByb2R1Y3Rpb24gc3dpdGNoLCB1Z2xpZmllcyBjb250ZW50cyAnICtcbiAgICAgICAgJ29mIC5kZXNrdG9wLCBwYWNrcyBhcHAgdG8gYXBwLmFzYXInKVxuICAgIC5vcHRpb24oJy1hLCAtLWFuZHJvaWQnLCAnZm9yY2UgYWRkaW5nIGFuZHJvaWQgYXMgYSBtb2JpbGUgcGxhdGZvcm0gaW5zdGVhZCBvZiBpb3MnKVxuICAgIC5vcHRpb24oJy1zLCAtLXNjYWZmb2xkJywgJ3dpbGwgc2NhZmZvbGQgLmRlc2t0b3AgaWYgbm90IHByZXNlbnQnKVxuICAgIC5vcHRpb24oJy0tbWV0ZW9yLXNldHRpbmdzIDxwYXRoPicsICdvbmx5IHdpdGggLWIsIGFkZHMgLS1zZXR0aW5ncyBvcHRpb25zIHRvIG1ldGVvcicpXG4gICAgLm9wdGlvbignLS1pYTMyJywgJ2dlbmVyYXRlIDMyYml0IGluc3RhbGxlci9wYWNrYWdlJylcbiAgICAub3B0aW9uKCctLWFsbC1hcmNocycsICdnZW5lcmF0ZSAzMmJpdCBhbmQgNjRiaXQgaW5zdGFsbGVycycpXG4gICAgLm9wdGlvbignLS13aW4nLCAnZ2VuZXJhdGUgV2luZG93cyBpbnN0YWxsZXInKVxuICAgIC5vcHRpb24oJy0tbGludXgnLCAnZ2VuZXJhdGUgTGludXggaW5zdGFsbGVyJylcbiAgICAub3B0aW9uKCctLW1hYycsICdnZW5lcmF0ZSBNYWMgaW5zdGFsbGVyJyk7XG5cbnByb2dyYW1cbiAgICAudXNhZ2UoJ1tjb21tYW5kXSBbb3B0aW9uc10nKVxuICAgIC52ZXJzaW9uKHJlcXVpcmUoJy4vLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbiwgJy1WLCAtLXZlcnNpb24nKVxuICAgIC5vbignLS1oZWxwJywgKCkgPT4ge1xuICAgICAgICBsb2coJyAgW2RkcF91cmxdIC0gcGFzcyBhIGRkcCB1cmwgaWYgeW91IHdhbnQgdG8gdXNlIGRpZmZlcmVudCBvbmUgdGhhbiB1c2VkIGluIG1ldGVvclxcJ3MgLS1tb2JpbGUtc2VydmVyJyk7XG4gICAgICAgIGxvZygnICAgICAgICAgICAgICB0aGlzIHdpbGwgYWxzbyB3b3JrIHdpdGggLWInKTtcbiAgICAgICAgbG9nKCcgICAgJyk7XG4gICAgICAgIGxvZygnICBFeGFtcGxlczonKTtcbiAgICAgICAgbG9nKCcnKTtcbiAgICAgICAgbG9nKFxuICAgICAgICAgICAgJyAgICcsXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgJyMgY2QgaW50byBtZXRlb3IgZGlyIGZpcnN0JyxcbiAgICAgICAgICAgICAgICAnY2QgL3lvdXIvbWV0ZW9yL2FwcCcsXG4gICAgICAgICAgICAgICAgJ21ldGVvciAtLW1vYmlsZS1zZXJ2ZXI9MTI3LjAuMC4xOjMwMDAnLFxuICAgICAgICAgICAgICAgICcnLFxuICAgICAgICAgICAgICAgICcjIG9wZW4gbmV3IHRlcm1pbmFsLCBhc3N1bWluZyB5b3UgaGF2ZSBkb25lIG5wbSBpbnN0YWxsIC0tc2F2ZS1kZXYgbWV0ZW9yLWRlc2t0b3AnLFxuICAgICAgICAgICAgICAgICducG0gcnVuIGRlc2t0b3AgLS0gaW5pdCcsXG4gICAgICAgICAgICAgICAgJ25wbSBydW4gZGVza3RvcCdcbiAgICAgICAgICAgIF0uam9pbignXFxuICAgICcpXG4gICAgICAgICk7XG4gICAgICAgIGxvZygnXFxuJyk7XG4gICAgfSk7XG5cblxuZnVuY3Rpb24gdmVyaWZ5QXJnc1N5bnRheCgpIHtcbiAgICBpZiAocHJvY2Vzcy5lbnYubnBtX2NvbmZpZ19hcmd2KSB7XG4gICAgICAgIGxldCBucG1Bcmd2O1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IFsnLWInLCAnLS1idWlsZC1tZXRlb3InLCAnLXQnLCAnLS1idWlsZC10aW1lb3V0JywgJy1wJywgJy0tcG9ydCcsXG4gICAgICAgICAgICAgICAgJy0tcHJvZHVjdGlvbicsICctYScsICctLWFuZHJvaWQnLCAnLXMnLCAnLS1zY2FmZm9sZCcsICctLWlhMzInLCAnLS13aW4nLFxuICAgICAgICAgICAgICAgICctLWxpbnV4JywgJy0tYWxsLWFyY2hzJywgJy0td2luJywgJy0tbWFjJywgJy0tbWV0ZW9yLXNldHRpbmdzJ107XG4gICAgICAgICAgICBucG1Bcmd2ID0gSlNPTi5wYXJzZShwcm9jZXNzLmVudi5ucG1fY29uZmlnX2FyZ3YpO1xuICAgICAgICAgICAgaWYgKG5wbUFyZ3YucmVtYWluLmxlbmd0aCA9PT0gMCAmJiBucG1Bcmd2Lm9yaWdpbmFsLmxlbmd0aCA+IDIpIHtcbiAgICAgICAgICAgICAgICBpZiAobnBtQXJndi5vcmlnaW5hbC5zb21lKGFyZyA9PiAhIX5hcmdzLmluZGV4T2YoYXJnKSkpIHtcbiAgICAgICAgICAgICAgICAgICAgd2FybignV0FSTklORzogc2VlbXMgdGhhdCB5b3UgbWlnaHQgdXNlZCB0aGUgd3JvbmcgY29uc29sZSBzeW50YXgsIG5vIGAgLS0nICtcbiAgICAgICAgICAgICAgICAgICAgICAgICcgYCBkZWxpbWl0ZXIgd2FzIGZvdW5kLCBiZSBzdXJlIHlvdSBhcmUgaW52b2tpbmcgbWV0ZW9yLWRlc2t0b3Agd2l0aCcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJyBpdCB3aGVuIHBhc3NpbmcgY29tbWFuZHMgb3Igb3B0aW9ucyAtPiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdgbnBtIHJ1biBkZXNrdG9wIC0tIGNvbW1hbmQgLS1vcHRpb25gXFxuJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAvLyBOb3Qgc3VyZSBpZiBgbnBtX2NvbmZpZ19hcmd2YCBpcyBhbHdheXMgcHJlc2VudC4uLlxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBtZXRlb3JEZXNrdG9wRmFjdG9yeShkZHBVcmwsIHByb2R1Y3Rpb24gPSBmYWxzZSkge1xuICAgIGluZm8oYE1FVEVPUi1ERVNLVE9QIHYke3JlcXVpcmUoJy4vLi4vLi4vcGFja2FnZS5qc29uJykudmVyc2lvbn1cXG5gKTtcblxuICAgIHZlcmlmeUFyZ3NTeW50YXgoKTtcblxuICAgIGNvbnN0IGlucHV0ID0gcHJvY2Vzcy5jd2QoKTtcblxuICAgIGlmICghaXNNZXRlb3JBcHAoaW5wdXQpKSB7XG4gICAgICAgIGVycm9yKGBub3QgaW4gYSBtZXRlb3IgYXBwIGRpclxcbiAke2lucHV0fWApO1xuICAgICAgICBwcm9jZXNzLmV4aXQoKTtcbiAgICB9XG5cbiAgICBpZiAoIXByb2dyYW0ub3V0cHV0KSB7XG4gICAgICAgIHByb2dyYW0ub3V0cHV0ID0gaW5wdXQ7XG4gICAgfVxuXG4gICAgaWYgKHByb2R1Y3Rpb24gJiYgIXByb2dyYW0ucHJvZHVjdGlvbikge1xuICAgICAgICBpbmZvKCdwYWNrYWdlL2J1aWxkLWluc3RhbGxlciBpbXBsaWVzIHNldHRpbmcgLS1wcm9kdWN0aW9uLCBzZXR0aW5nIGl0IGZvciB5b3UnKTtcbiAgICB9XG5cbiAgICBpZiAoIXByb2dyYW0uYnVpbGRNZXRlb3IpIHtcbiAgICAgICAgcHJvZ3JhbS5wb3J0ID0gcHJvZ3JhbS5wb3J0IHx8IDMwMDA7XG4gICAgICAgIGluZm8oYFJFTUlOREVSOiB5b3VyIE1ldGVvciBwcm9qZWN0IHNob3VsZCBiZSBydW5uaW5nIG5vdyBvbiBwb3J0ICR7cHJvZ3JhbS5wb3J0fVxcbmApO1xuICAgIH1cblxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGRkcFVybCxcbiAgICAgICAgc2tpcE1vYmlsZUJ1aWxkOiBwcm9ncmFtLmJ1aWxkTWV0ZW9yID8gIXByb2dyYW0uYnVpbGRNZXRlb3IgOiB0cnVlLFxuICAgICAgICBwcm9kdWN0aW9uOiBwcm9ncmFtLnByb2R1Y3Rpb24gfHwgcHJvZHVjdGlvblxuICAgIH07XG5cbiAgICBhc3NpZ25JbihvcHRpb25zLCBwcm9ncmFtKTtcblxuICAgIHJldHVybiBtZXRlb3JEZXNrdG9wKFxuICAgICAgICBpbnB1dCxcbiAgICAgICAgcHJvZ3JhbS5vdXRwdXQsXG4gICAgICAgIG9wdGlvbnNcbiAgICApO1xufVxuXG5mdW5jdGlvbiBydW4oZGRwVXJsKSB7XG4gICAgbWV0ZW9yRGVza3RvcEZhY3RvcnkoZ2V0RGRwVXJsKGRkcFVybCkpLnJ1bigpO1xufVxuXG5mdW5jdGlvbiBidWlsZChkZHBVcmwpIHtcbiAgICBtZXRlb3JEZXNrdG9wRmFjdG9yeShnZXREZHBVcmwoZGRwVXJsKSkuYnVpbGQoKTtcbn1cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgICBtZXRlb3JEZXNrdG9wRmFjdG9yeSgpLmluaXQoKTtcbn1cblxuZnVuY3Rpb24ganVzdFJ1bigpIHtcbiAgICBtZXRlb3JEZXNrdG9wRmFjdG9yeSgpLmp1c3RSdW4oKTtcbn1cblxuZnVuY3Rpb24gcnVuUGFja2FnZXIoZGRwVXJsKSB7XG4gICAgbWV0ZW9yRGVza3RvcEZhY3RvcnkoZ2V0RGRwVXJsKGRkcFVybCksIHRydWUpLnJ1blBhY2thZ2VyKCk7XG59XG5cbmZ1bmN0aW9uIGJ1aWxkSW5zdGFsbGVyKGRkcFVybCkge1xuICAgIG1ldGVvckRlc2t0b3BGYWN0b3J5KGdldERkcFVybChkZHBVcmwpLCB0cnVlKS5idWlsZEluc3RhbGxlcigpO1xufVxuXG5mdW5jdGlvbiBpbml0VGVzdHNTdXBwb3J0KCkge1xuICAgIGxvZygnaW5zdGFsbGluZyBjcm9zcy1lbnYsIGF2YSwgbWV0ZW9yLWRlc2t0b3AtdGVzdC1zdWl0ZSBhbmQgc3BlY3Ryb24nKTtcbiAgICBsb2coJ3J1bm5pbmcgYG1ldGVvciBucG0gaW5zdGFsbCAtLXNhdmUtZGV2IGNyb3NzLWVudiBhdmEgc3BlY3Ryb24gbWV0ZW9yLWRlc2t0b3AtdGVzdC1zdWl0ZWAnKTtcblxuICAgIGNvbnN0IHsgY29kZSB9ID0gc2hlbGwuZXhlYygnbWV0ZW9yIG5wbSBpbnN0YWxsIC0tc2F2ZS1kZXYgY3Jvc3MtZW52IGF2YSBzcGVjdHJvbiBtZXRlb3ItZGVza3RvcC10ZXN0LXN1aXRlJyk7XG5cbiAgICBpZiAoY29kZSAhPT0gMCkge1xuICAgICAgICB3YXJuKCdjb3VsZCBub3QgYWRkIGNyb3NzLWVudiwgYXZhIGFuZCBzcGVjdHJvbiB0byB5b3VyIGBkZXZEZXBlbmRlbmNpZXNgLCBwbGVhc2UgZG8gaXQnICtcbiAgICAgICAgICAgICcgbWFudWFsbHknKTtcbiAgICB9XG5cbiAgICBjb25zdCB0ZXN0ID0gJ2Nyb3NzLWVudiBOT0RFX0VOVj10ZXN0IGF2YSAuZGVza3RvcC8qKi8qLnRlc3QuanMgLXMgLS12ZXJib3NlJztcbiAgICBjb25zdCB0ZXN0V2F0Y2ggPSAnY3Jvc3MtZW52IE5PREVfRU5WPXRlc3QgYXZhIC5kZXNrdG9wLyoqLyoudGVzdC5qcyAtcyAtLXZlcmJvc2UnICtcbiAgICAgICAgJyAtLXdhdGNoIC0tc291cmNlIC5kZXNrdG9wJztcblxuICAgIGZ1bmN0aW9uIGZhaWwoKSB7XG4gICAgICAgIGVycm9yKCdcXG5jb3VsZCBub3QgYWRkIGVudHJpZXMgdG8gYHNjcmlwdHNgIGluIHBhY2thZ2UuanNvbicpO1xuICAgICAgICBsb2coJ3BsZWFzZSB0cnkgdG8gYWRkIGl0IG1hbnVhbGx5XFxuJyk7XG4gICAgICAgIGxvZyhgdGVzdC1kZXNrdG9wOiAke3Rlc3R9YCk7XG4gICAgICAgIGxvZyhgdGVzdC1kZXNrdG9wLXdhdGNoOiAke3Rlc3RXYXRjaH1gKTtcbiAgICB9XG5cbiAgICBjb25zdCBwYWNrYWdlSnNvblBhdGggPSBwYXRoLnJlc29sdmUoXG4gICAgICAgIHBhdGguam9pbihwcm9jZXNzLmN3ZCgpLCAncGFja2FnZS5qc29uJylcbiAgICApO1xuXG4gICAgYWRkU2NyaXB0KCd0ZXN0LWRlc2t0b3AnLCB0ZXN0LCBwYWNrYWdlSnNvblBhdGgsIGZhaWwpO1xuICAgIGFkZFNjcmlwdCgndGVzdC1kZXNrdG9wLXdhdGNoJywgdGVzdFdhdGNoLCBwYWNrYWdlSnNvblBhdGgsIGZhaWwpO1xuXG4gICAgbG9nKCdcXG5hZGRlZCB0ZXN0LWRlc2t0b3AgYW5kIHRlc3QtZGVza3RvcC13YXRjaCBlbnRyaWVzJyk7XG4gICAgbG9nKCdydW4gdGhlIHRlc3Qgd2l0aCBgbnBtIHJ1biB0ZXN0LWRlc2t0b3BgJyk7XG59XG5cbnByb2dyYW1cbiAgICAuY29tbWFuZCgnaW5pdCcpXG4gICAgLmRlc2NyaXB0aW9uKCdzY2FmZm9sZHMgLmRlc2t0b3AgZGlyIGluIHRoZSBtZXRlb3IgYXBwJylcbiAgICAuYWN0aW9uKGluaXQpO1xuXG5wcm9ncmFtXG4gICAgLmNvbW1hbmQoJ3J1biBbZGRwX3VybF0nKVxuICAgIC5kZXNjcmlwdGlvbignKGRlZmF1bHQpIGJ1aWxkcyBhbmQgcnVucyBkZXNrdG9wIGFwcCcpXG4gICAgLmFjdGlvbihydW4pO1xuXG5wcm9ncmFtXG4gICAgLmNvbW1hbmQoJ2J1aWxkIFtkZHBfdXJsXScpXG4gICAgLmRlc2NyaXB0aW9uKCdidWlsZHMgeW91ciBkZXNrdG9wIGFwcCcpXG4gICAgLmFjdGlvbihidWlsZCk7XG5cbnByb2dyYW1cbiAgICAuY29tbWFuZCgnYnVpbGQtaW5zdGFsbGVyIFtkZHBfdXJsXScpXG4gICAgLmRlc2NyaXB0aW9uKCdjcmVhdGVzIHRoZSBpbnN0YWxsZXInKVxuICAgIC5hY3Rpb24oYnVpbGRJbnN0YWxsZXIpO1xuXG5wcm9ncmFtXG4gICAgLmNvbW1hbmQoJ2p1c3QtcnVuJylcbiAgICAuZGVzY3JpcHRpb24oJ2FsaWFzIGZvciBydW5uaW5nIGBlbGVjdHJvbiAuYCBpbiBgLm1ldGVvci9kZXNrdG9wLWJ1aWxkYCcpXG4gICAgLmFjdGlvbihqdXN0UnVuKTtcblxucHJvZ3JhbVxuICAgIC5jb21tYW5kKCdwYWNrYWdlIFtkZHBfdXJsXScpXG4gICAgLmRlc2NyaXB0aW9uKCdydW5zIGVsZWN0cm9uIHBhY2thZ2VyJylcbiAgICAuYWN0aW9uKHJ1blBhY2thZ2VyKTtcblxucHJvZ3JhbVxuICAgIC5jb21tYW5kKCdpbml0LXRlc3RzLXN1cHBvcnQnKVxuICAgIC5kZXNjcmlwdGlvbigncHJlcGFyZXMgcHJvamVjdCBmb3IgcnVubmluZyBmdW5jdGlvbmFsIHRlc3RzIG9mIGRlc2t0b3AgYXBwJylcbiAgICAuYWN0aW9uKGluaXRUZXN0c1N1cHBvcnQpO1xuXG5pZiAocHJvY2Vzcy5hcmd2Lmxlbmd0aCA9PT0gMiB8fCAhfignLWh8LS1oZWxwfHJ1bnxpbml0fGJ1aWxkfGJ1aWxkLWluc3RhbGxlcnxqdXN0LXJ1bnxpbml0LXRlc3RzLXN1cHBvcnR8cGFja2FnZScuaW5kZXhPZihjbWQpKVxuKSB7XG4gICAgbGV0IHsgYXJndiB9ID0gcHJvY2VzcztcbiAgICBpZiAocHJvY2Vzcy5hcmd2Lmxlbmd0aCA9PT0gMikge1xuICAgICAgICBhcmd2LnB1c2goJ3J1bicpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBjb21tYW5kID0gYXJndi5zcGxpY2UoMCwgMik7XG4gICAgICAgIGNvbW1hbmQgPSBjb21tYW5kLmNvbmNhdCgncnVuJywgYXJndik7XG4gICAgICAgIGFyZ3YgPSBjb21tYW5kO1xuICAgIH1cbiAgICBwcm9ncmFtLnBhcnNlKGFyZ3YpO1xufSBlbHNlIHtcbiAgICBwcm9ncmFtLnBhcnNlKHByb2Nlc3MuYXJndik7XG59XG4iXX0=